// Generated by js_of_ocaml 3.0
(function(joo_global_object)
   {"use strict";
    function raw_array_sub(a,i,l)
     {var b=new Array(l);for(var j=0;j < l;j++)b[j] = a[i + j];return b}
    function caml_subarray_to_string(a,i,len)
     {var f=String.fromCharCode;
      if(i == 0 && len <= 4096 && len == a.length)return f.apply(null,a);
      var s="";
      for(;0 < len;i += 1024,len -= 1024)
       s += f.apply(null,raw_array_sub(a,i,Math.min(len,1024)));
      return s}
    function caml_convert_string_to_array(s)
     {if(joo_global_object.Uint8Array)
       var a=new (joo_global_object.Uint8Array)(s.l);
      else
       var a=new Array(s.l);
      var b=s.c,l=b.length,i=0;
      for(;i < l;i++)a[i] = b.charCodeAt(i);
      for(l = s.l;i < l;i++)a[i] = 0;
      s.c = a;
      s.t = 4;
      return a}
    function caml_blit_string(s1,i1,s2,i2,len)
     {if(len == 0)return 0;
      if(i2 == 0 && (len >= s2.l || s2.t == 2 && len >= s2.c.length))
       {s2.c
        =
        s1.t == 4
         ?caml_subarray_to_string(s1.c,i1,len)
         :i1 == 0 && s1.c.length == len?s1.c:s1.c.substr(i1,len);
        s2.t = s2.c.length == s2.l?0:2}
      else
       if(s2.t == 2 && i2 == s2.c.length)
        {s2.c
         +=
         s1.t == 4
          ?caml_subarray_to_string(s1.c,i1,len)
          :i1 == 0 && s1.c.length == len?s1.c:s1.c.substr(i1,len);
         s2.t = s2.c.length == s2.l?0:2}
       else
        {if(s2.t != 4)caml_convert_string_to_array(s2);
         var c1=s1.c,c2=s2.c;
         if(s1.t == 4)
          if(i2 <= i1)
           for(var i=0;i < len;i++)c2[i2 + i] = c1[i1 + i];
          else
           for(var i=len - 1;i >= 0;i--)c2[i2 + i] = c1[i1 + i];
         else
          {var l=Math.min(len,c1.length - i1);
           for(var i=0;i < l;i++)c2[i2 + i] = c1.charCodeAt(i1 + i);
           for(;i < len;i++)c2[i2 + i] = 0}}
      return 0}
    var caml_blit_bytes=caml_blit_string;
    function caml_raise_with_arg(tag,arg){throw [0,tag,arg]}
    function caml_str_repeat(n,s)
     {if(s.repeat)return s.repeat(n);
      var r="",l=0;
      if(n == 0)return r;
      for(;;)
       {if(n & 1)r += s;
        n >>= 1;
        if(n == 0)return r;
        s += s;
        l++;
        if(l == 9)s.slice(0,1)}}
    function caml_convert_string_to_bytes(s)
     {if(s.t == 2)
       s.c += caml_str_repeat(s.l - s.c.length,"\0");
      else
       s.c = caml_subarray_to_string(s.c,0,s.c.length);
      s.t = 0}
    function caml_is_ascii(s)
     {if(s.length < 24)
       {for(var i=0;i < s.length;i++)if(s.charCodeAt(i) > 127)return false;
        return true}
      else
       return !/[^\x00-\x7f]/.test(s)}
    function caml_utf16_of_utf8(s)
     {for(var b="",t="",c,c1,c2,v,i=0,l=s.length;i < l;i++)
       {c1 = s.charCodeAt(i);
        if(c1 < 128)
         {for(var j=i + 1;j < l && (c1 = s.charCodeAt(j)) < 128;j++);
          if(j - i > 512)
           {t.substr(0,1);b += t;t = "";b += s.slice(i,j)}
          else
           t += s.slice(i,j);
          if(j == l)break;
          i = j}
        v = 1;
        if(++i < l && ((c2 = s.charCodeAt(i)) & -64) == 128)
         {c = c2 + (c1 << 6);
          if(c1 < 224)
           {v = c - 12416;if(v < 128)v = 1}
          else
           {v = 2;
            if(++i < l && ((c2 = s.charCodeAt(i)) & -64) == 128)
             {c = c2 + (c << 6);
              if(c1 < 240)
               {v = c - 925824;if(v < 2048 || v >= 55295 && v < 57344)v = 2}
              else
               {v = 3;
                if
                 (++i
                  <
                  l
                  &&
                  ((c2 = s.charCodeAt(i)) & -64)
                  ==
                  128
                  &&
                  c1
                  <
                  245)
                 {v = c2 - 63447168 + (c << 6);
                  if(v < 65536 || v > 1114111)v = 3}}}}}
        if(v < 4)
         {i -= v;t += "\ufffd"}
        else
         if(v > 65535)
          t += String.fromCharCode(55232 + (v >> 10),56320 + (v & 1023));
         else
          t += String.fromCharCode(v);
        if(t.length > 1024){t.substr(0,1);b += t;t = ""}}
      return b + t}
    function caml_to_js_string(s)
     {switch(s.t)
       {case 9:return s.c;
        default:caml_convert_string_to_bytes(s);case 0:
         if(caml_is_ascii(s.c)){s.t = 9;return s.c}s.t = 8;
        case 8:return caml_utf16_of_utf8(s.c)
        }}
    function MlString(tag,contents,length)
     {this.t = tag;this.c = contents;this.l = length}
    MlString.prototype.toString = function(){return caml_to_js_string(this)};
    function caml_new_string(s){return new MlString(0,s,s.length)}
    function caml_raise_with_string(tag,msg)
     {caml_raise_with_arg(tag,caml_new_string(msg))}
    var caml_global_data=[0];
    function caml_invalid_argument(msg)
     {caml_raise_with_string(caml_global_data.Invalid_argument,msg)}
    function caml_string_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_bytes_unsafe_set(s,i,c)
     {c &= 255;
      if(s.t != 4)
       {if(i == s.c.length)
         {s.c += String.fromCharCode(c);if(i + 1 == s.l)s.t = 0;return 0}
        caml_convert_string_to_array(s)}
      s.c[i] = c;
      return 0}
    function caml_bytes_set(s,i,c)
     {if(i >>> 0 >= s.l)caml_string_bound_error();
      return caml_bytes_unsafe_set(s,i,c)}
    function raw_array_append_one(a,x)
     {var l=a.length,b=new Array(l + 1),i=0;
      for(;i < l;i++)b[i] = a[i];
      b[i] = x;
      return b}
    function caml_call_gen(f,args)
     {if(f.fun)return caml_call_gen(f.fun,args);
      var n=f.length,argsLen=args.length,d=n - argsLen;
      if(d == 0)
       return f.apply(null,args);
      else
       if(d < 0)
        return caml_call_gen
                (f.apply(null,raw_array_sub(args,0,n)),
                 raw_array_sub(args,n,argsLen - n));
       else
        return function(x)
         {return caml_call_gen(f,raw_array_append_one(args,x))}}
    function caml_classify_float(x)
     {if(isFinite(x))
       {if(Math.abs(x) >= 2.22507385850720138e-308)return 0;
        if(x != 0)return 1;
        return 2}
      return isNaN(x)?4:3}
    function caml_create_bytes(len)
     {if(len < 0)caml_invalid_argument("Bytes.create");
      return new MlString(len?2:9,"",len)}
    function caml_raise_constant(tag){throw tag}
    function caml_raise_zero_divide()
     {caml_raise_constant(caml_global_data.Division_by_zero)}
    function caml_div(x,y)
     {if(y == 0)caml_raise_zero_divide();return x / y | 0}
    function caml_fill_string(s,i,l,c)
     {if(l > 0)
       if(i == 0 && (l >= s.l || s.t == 2 && l >= s.c.length))
        if(c == 0)
         {s.c = "";s.t = 2}
        else
         {s.c = caml_str_repeat(l,String.fromCharCode(c));s.t = l == s.l?0:2}
       else
        {if(s.t != 4)caml_convert_string_to_array(s);
         for(l += i;i < l;i++)s.c[i] = c}
      return 0}
    var caml_fill_bytes=caml_fill_string;
    function caml_failwith(msg)
     {caml_raise_with_string(caml_global_data.Failure,msg)}
    function caml_bytes_of_string(s)
     {if((s.t & 6) != 0)caml_convert_string_to_bytes(s);return s.c}
    function caml_float_of_string(s)
     {var res;
      s = caml_bytes_of_string(s);
      res = +s;
      if(s.length > 0 && res === res)return res;
      s = s.replace(/_/g,"");
      res = +s;
      if(s.length > 0 && res === res || /^[+-]?nan$/i.test(s))return res;
      var m=/^ *([+-]?)0x([0-9a-f]+)\.?([0-9a-f]*)p([+-]?[0-9]+)/i.exec(s);
      if(m)
       {var
         m3=m[3].replace(/0+$/,""),
         mantissa=parseInt(m[1] + m[2] + m3,16),
         exponent=(m[4] | 0) - 4 * m3.length;
        res = mantissa * Math.pow(2,exponent);
        return res}
      if(/^\+?inf(inity)?$/i.test(s))return Infinity;
      if(/^-inf(inity)?$/i.test(s))return -Infinity;
      caml_failwith("float_of_string")}
    function caml_parse_format(fmt)
     {fmt = caml_bytes_of_string(fmt);
      var len=fmt.length;
      if(len > 31)caml_invalid_argument("format_int: format too long");
      var
       f=
        {justify:"+",
         signstyle:"-",
         filler:" ",
         alternate:false,
         base:0,
         signedconv:false,
         width:0,
         uppercase:false,
         sign:1,
         prec:-1,
         conv:"f"};
      for(var i=0;i < len;i++)
       {var c=fmt.charAt(i);
        switch(c)
         {case "-":f.justify = "-";break;
          case "+":
          case " ":f.signstyle = c;break;
          case "0":f.filler = "0";break;
          case "#":f.alternate = true;break;
          case "1":
          case "2":
          case "3":
          case "4":
          case "5":
          case "6":
          case "7":
          case "8":
          case "9":
           f.width = 0;
           while(c = fmt.charCodeAt(i) - 48,c >= 0 && c <= 9)
            {f.width = f.width * 10 + c;i++}
           i--;
           break;
          case ".":
           f.prec = 0;
           i++;
           while(c = fmt.charCodeAt(i) - 48,c >= 0 && c <= 9)
            {f.prec = f.prec * 10 + c;i++}
           i--;
          case "d":
          case "i":f.signedconv = true;
          case "u":f.base = 10;break;
          case "x":f.base = 16;break;
          case "X":f.base = 16;f.uppercase = true;break;
          case "o":f.base = 8;break;
          case "e":
          case "f":
          case "g":f.signedconv = true;f.conv = c;break;
          case "E":
          case "F":
          case "G":
           f.signedconv = true;
           f.uppercase = true;
           f.conv = c.toLowerCase();
           break
          }}
      return f}
    function caml_finish_formatting(f,rawbuffer)
     {if(f.uppercase)rawbuffer = rawbuffer.toUpperCase();
      var len=rawbuffer.length;
      if(f.signedconv && (f.sign < 0 || f.signstyle != "-"))len++;
      if(f.alternate){if(f.base == 8)len += 1;if(f.base == 16)len += 2}
      var buffer="";
      if(f.justify == "+" && f.filler == " ")
       for(var i=len;i < f.width;i++)buffer += " ";
      if(f.signedconv)
       if(f.sign < 0)
        buffer += "-";
       else
        if(f.signstyle != "-")buffer += f.signstyle;
      if(f.alternate && f.base == 8)buffer += "0";
      if(f.alternate && f.base == 16)buffer += "0x";
      if(f.justify == "+" && f.filler == "0")
       for(var i=len;i < f.width;i++)buffer += "0";
      buffer += rawbuffer;
      if(f.justify == "-")for(var i=len;i < f.width;i++)buffer += " ";
      return caml_new_string(buffer)}
    function caml_format_float(fmt,x)
     {var s,f=caml_parse_format(fmt),prec=f.prec < 0?6:f.prec;
      if(x < 0 || x == 0 && 1 / x == -Infinity){f.sign = -1;x = -x}
      if(isNaN(x))
       {s = "nan";f.filler = " "}
      else
       if(!isFinite(x))
        {s = "inf";f.filler = " "}
       else
        switch(f.conv)
         {case "e":
           var s=x.toExponential(prec),i=s.length;
           if(s.charAt(i - 3) == "e")
            s = s.slice(0,i - 1) + "0" + s.slice(i - 1);
           break;
          case "f":s = x.toFixed(prec);break;
          case "g":
           prec = prec?prec:1;
           s = x.toExponential(prec - 1);
           var j=s.indexOf("e"),exp=+s.slice(j + 1);
           if(exp < -4 || x >= 1e+21 || x.toFixed(0).length > prec)
            {var i=j - 1;
             while(s.charAt(i) == "0")i--;
             if(s.charAt(i) == ".")i--;
             s = s.slice(0,i + 1) + s.slice(j);
             i = s.length;
             if(s.charAt(i - 3) == "e")
              s = s.slice(0,i - 1) + "0" + s.slice(i - 1);
             break}
           else
            {var p=prec;
             if(exp < 0)
              {p -= exp + 1;s = x.toFixed(p)}
             else
              while(s = x.toFixed(p),s.length > prec + 1)p--;
             if(p)
              {var i=s.length - 1;
               while(s.charAt(i) == "0")i--;
               if(s.charAt(i) == ".")i--;
               s = s.slice(0,i + 1)}}
           break
          }
      return caml_finish_formatting(f,s)}
    function caml_format_int(fmt,i)
     {if(caml_bytes_of_string(fmt) == "%d")return caml_new_string("" + i);
      var f=caml_parse_format(fmt);
      if(i < 0)if(f.signedconv){f.sign = -1;i = -i}else i >>>= 0;
      var s=i.toString(f.base);
      if(f.prec >= 0)
       {f.filler = " ";
        var n=f.prec - s.length;
        if(n > 0)s = caml_str_repeat(n,"0") + s}
      return caml_finish_formatting(f,s)}
    var caml_oo_last_id=0;
    function caml_fresh_oo_id(){return caml_oo_last_id++}
    function caml_int64_compare(x,y)
     {var x3=x[3] << 16,y3=y[3] << 16;
      if(x3 > y3)return 1;
      if(x3 < y3)return -1;
      if(x[2] > y[2])return 1;
      if(x[2] < y[2])return -1;
      if(x[1] > y[1])return 1;
      if(x[1] < y[1])return -1;
      return 0}
    function caml_int_compare(a,b)
     {if(a < b)return -1;if(a == b)return 0;return 1}
    function caml_string_compare(s1,s2)
     {s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c < s2.c?-1:s1.c > s2.c?1:0}
    function caml_compare_val(a,b,total)
     {var stack=[];
      for(;;)
       {if(!(total && a === b))
         if(a instanceof MlString)
          if(b instanceof MlString)
           {if(a !== b){var x=caml_string_compare(a,b);if(x != 0)return x}}
          else
           return 1;
         else
          if(a instanceof Array && a[0] === (a[0] | 0))
           {var ta=a[0];
            if(ta === 254)ta = 0;
            if(ta === 250)
             {a = a[1];continue}
            else
             if(b instanceof Array && b[0] === (b[0] | 0))
              {var tb=b[0];
               if(tb === 254)tb = 0;
               if(tb === 250)
                {b = b[1];continue}
               else
                if(ta != tb)
                 return ta < tb?-1:1;
                else
                 switch(ta)
                  {case 248:
                    var x=caml_int_compare(a[2],b[2]);if(x != 0)return x;break;
                   case 251:caml_invalid_argument("equal: abstract value");
                   case 255:
                    var x=caml_int64_compare(a,b);if(x != 0)return x;break;
                   default:
                    if(a.length != b.length)return a.length < b.length?-1:1;
                    if(a.length > 1)stack.push(a,b,1)}}
             else
              return 1}
          else
           if
            (b instanceof MlString
             ||
             b instanceof Array
             &&
             b[0]
             ===
             (b[0] | 0))
            return -1;
           else
            if(typeof a != "number" && a && a.compare)
             return a.compare(b,total);
            else
             if(typeof a == "function")
              caml_invalid_argument("compare: functional value");
             else
              {if(a < b)return -1;
               if(a > b)return 1;
               if(a != b)
                {if(!total)return NaN;if(a == a)return 1;if(b == b)return -1}}
        if(stack.length == 0)return 0;
        var i=stack.pop();
        b = stack.pop();
        a = stack.pop();
        if(i + 1 < a.length)stack.push(a,b,i + 1);
        a = a[i];
        b = b[i]}}
    function caml_greaterequal(x,y)
     {return +(caml_compare_val(x,y,false) >= 0)}
    function caml_utf8_of_utf16(s)
     {for(var b="",t=b,c,d,i=0,l=s.length;i < l;i++)
       {c = s.charCodeAt(i);
        if(c < 128)
         {for(var j=i + 1;j < l && (c = s.charCodeAt(j)) < 128;j++);
          if(j - i > 512)
           {t.substr(0,1);b += t;t = "";b += s.slice(i,j)}
          else
           t += s.slice(i,j);
          if(j == l)break;
          i = j}
        if(c < 2048)
         {t += String.fromCharCode(192 | c >> 6);
          t += String.fromCharCode(128 | c & 63)}
        else
         if(c < 55296 || c >= 57343)
          t
          +=
          String.fromCharCode(224 | c >> 12,128 | c >> 6 & 63,128 | c & 63);
         else
          if
           (c
            >=
            56319
            ||
            i
            +
            1
            ==
            l
            ||
            (d = s.charCodeAt(i + 1))
            <
            56320
            ||
            d
            >
            57343)
           t += "\xef\xbf\xbd";
          else
           {i++;
            c = (c << 10) + d - 56613888;
            t
            +=
            String.fromCharCode
             (240 | c >> 18,128 | c >> 12 & 63,128 | c >> 6 & 63,128 | c & 63)}
        if(t.length > 1024){t.substr(0,1);b += t;t = ""}}
      return b + t}
    function caml_js_to_string(s)
     {var tag=9;
      if(!caml_is_ascii(s))tag = 8,s = caml_utf8_of_utf16(s);
      return new MlString(tag,s,s.length)}
    function caml_hexstring_of_float(x,prec,style)
     {if(!isFinite(x))
       {if(isNaN(x))return caml_js_to_string("nan");
        return caml_js_to_string(x > 0?"infinity":"-infinity")}
      var sign=x == 0 && 1 / x == -Infinity?1:x >= 0?0:1;
      if(sign)x = -x;
      var exp=0;
      if(x == 0)
       ;
      else
       if(x < 1)
        while(x < 1 && exp > -1022){x *= 2;exp--}
       else
        while(x >= 2){x /= 2;exp++}
      var exp_sign=exp < 0?"":"+",sign_str="";
      if(sign)
       sign_str = "-";
      else
       switch(style)
        {case 43:sign_str = "+";break;
         case 32:sign_str = " ";break;
         default:break}
      if(prec >= 0 && prec < 13)
       {var cst=Math.pow(2,prec * 4);x = Math.round(x * cst) / cst}
      var x_str=x.toString(16);
      if(prec >= 0)
       {var idx=x_str.indexOf(".");
        if(idx < 0)
         x_str += "." + caml_str_repeat(prec,"0");
        else
         {var size=idx + 1 + prec;
          if(x_str.length < size)
           x_str += caml_str_repeat(size - x_str.length,"0");
          else
           x_str = x_str.substr(0,size)}}
      return caml_js_to_string
              (sign_str + "0x" + x_str + "p" + exp_sign + exp.toString(10))}
    function caml_int64_float_of_bits(x)
     {var exp=(x[3] & 32767) >> 4;
      if(exp == 2047)
       return (x[1] | x[2] | x[3] & 15) == 0
               ?x[3] & 32768?-Infinity:Infinity
               :NaN;
      var k=Math.pow(2,-24),res=(x[1] * k + x[2]) * k + (x[3] & 15);
      if(exp > 0)
       {res += 16;res *= Math.pow(2,exp - 1027)}
      else
       res *= Math.pow(2,-1026);
      if(x[3] & 32768)res = -res;
      return res}
    function caml_int64_is_zero(x){return (x[3] | x[2] | x[1]) == 0}
    function caml_int64_of_int32(x)
     {return [255,x & 16777215,x >> 24 & 16777215,x >> 31 & 65535]}
    function caml_obj_dup(x)
     {var l=x.length,a=new Array(l);
      for(var i=0;i < l;i++)a[i] = x[i];
      return a}
    function caml_int64_sub(x,y)
     {var
       z1=x[1] - y[1],
       z2=x[2] - y[2] + (z1 >> 24),
       z3=x[3] - y[3] + (z2 >> 24);
      return [255,z1 & 16777215,z2 & 16777215,z3 & 65535]}
    function caml_int64_ucompare(x,y)
     {if(x[3] > y[3])return 1;
      if(x[3] < y[3])return -1;
      if(x[2] > y[2])return 1;
      if(x[2] < y[2])return -1;
      if(x[1] > y[1])return 1;
      if(x[1] < y[1])return -1;
      return 0}
    function caml_int64_lsl1(x)
     {x[3] = x[3] << 1 | x[2] >> 23;
      x[2] = (x[2] << 1 | x[1] >> 23) & 16777215;
      x[1] = x[1] << 1 & 16777215}
    function caml_int64_lsr1(x)
     {x[1] = (x[1] >>> 1 | x[2] << 23) & 16777215;
      x[2] = (x[2] >>> 1 | x[3] << 23) & 16777215;
      x[3] = x[3] >>> 1}
    function caml_int64_udivmod(x,y)
     {var
       offset=0,
       modulus=caml_obj_dup(x),
       divisor=caml_obj_dup(y),
       quotient=[255,0,0,0];
      while(caml_int64_ucompare(modulus,divisor) > 0)
       {offset++;caml_int64_lsl1(divisor)}
      while(offset >= 0)
       {offset--;
        caml_int64_lsl1(quotient);
        if(caml_int64_ucompare(modulus,divisor) >= 0)
         {quotient[1]++;modulus = caml_int64_sub(modulus,divisor)}
        caml_int64_lsr1(divisor)}
      return [0,quotient,modulus]}
    function caml_int64_to_int32(x){return x[1] | x[2] << 24}
    function caml_int64_is_negative(x){return x[3] << 16 < 0}
    function caml_int64_neg(x)
     {var y1=-x[1],y2=-x[2] + (y1 >> 24),y3=-x[3] + (y2 >> 24);
      return [255,y1 & 16777215,y2 & 16777215,y3 & 65535]}
    function caml_int64_format(fmt,x)
     {var f=caml_parse_format(fmt);
      if(f.signedconv && caml_int64_is_negative(x))
       {f.sign = -1;x = caml_int64_neg(x)}
      var
       buffer="",
       wbase=caml_int64_of_int32(f.base),
       cvtbl="0123456789abcdef";
      do
       {var p=caml_int64_udivmod(x,wbase);
        x = p[1];
        buffer = cvtbl.charAt(caml_int64_to_int32(p[2])) + buffer}
      while
       (!caml_int64_is_zero(x));
      if(f.prec >= 0)
       {f.filler = " ";
        var n=f.prec - buffer.length;
        if(n > 0)buffer = caml_str_repeat(n,"0") + buffer}
      return caml_finish_formatting(f,buffer)}
    function caml_ml_string_length(s){return s.l}
    function caml_string_unsafe_get(s,i)
     {switch(s.t & 6)
       {default:if(i >= s.c.length)return 0;case 0:return s.c.charCodeAt(i);
        case 4:return s.c[i]
        }}
    function caml_int64_add(x,y)
     {var
       z1=x[1] + y[1],
       z2=x[2] + y[2] + (z1 >> 24),
       z3=x[3] + y[3] + (z2 >> 24);
      return [255,z1 & 16777215,z2 & 16777215,z3 & 65535]}
    var caml_int64_offset=Math.pow(2,-24);
    function caml_int64_mul(x,y)
     {var
       z1=x[1] * y[1],
       z2=(z1 * caml_int64_offset | 0) + x[2] * y[1] + x[1] * y[2],
       z3=
        (z2 * caml_int64_offset | 0)
        +
        x[3]
        *
        y[1]
        +
        x[2]
        *
        y[2]
        +
        x[1]
        *
        y[3];
      return [255,z1 & 16777215,z2 & 16777215,z3 & 65535]}
    function caml_int64_ult(x,y){return caml_int64_ucompare(x,y) < 0}
    function caml_parse_sign_and_base(s)
     {var
       i=0,
       len=caml_ml_string_length(s),
       base=10,
       sign=len > 0 && caml_string_unsafe_get(s,0) == 45?(i++,-1):1;
      if(i + 1 < len && caml_string_unsafe_get(s,i) == 48)
       switch(caml_string_unsafe_get(s,i + 1))
        {case 120:
         case 88:base = 16;i += 2;break;
         case 111:
         case 79:base = 8;i += 2;break;
         case 98:
         case 66:base = 2;i += 2;break
         }
      return [i,sign,base]}
    function caml_parse_digit(c)
     {if(c >= 48 && c <= 57)return c - 48;
      if(c >= 65 && c <= 90)return c - 55;
      if(c >= 97 && c <= 122)return c - 87;
      return -1}
    function caml_int64_of_string(s)
     {var
       r=caml_parse_sign_and_base(s),
       i=r[0],
       sign=r[1],
       base=r[2],
       base64=caml_int64_of_int32(base),
       threshold=caml_int64_udivmod([255,16777215,268435455,65535],base64)[1],
       c=caml_string_unsafe_get(s,i),
       d=caml_parse_digit(c);
      if(d < 0 || d >= base)caml_failwith("int_of_string");
      var res=caml_int64_of_int32(d);
      for(;;)
       {i++;
        c = caml_string_unsafe_get(s,i);
        if(c == 95)continue;
        d = caml_parse_digit(c);
        if(d < 0 || d >= base)break;
        if(caml_int64_ult(threshold,res))caml_failwith("int_of_string");
        d = caml_int64_of_int32(d);
        res = caml_int64_add(caml_int64_mul(base64,res),d);
        if(caml_int64_ult(res,d))caml_failwith("int_of_string")}
      if(i != caml_ml_string_length(s))caml_failwith("int_of_string");
      if(r[2] == 10 && caml_int64_ult([255,0,0,32768],res))
       caml_failwith("int_of_string");
      if(sign < 0)res = caml_int64_neg(res);
      return res}
    function caml_int64_to_float(x)
     {return (x[3] << 16) * Math.pow(2,32) + x[2] * Math.pow(2,24) + x[1]}
    function caml_int_of_string(s)
     {var
       r=caml_parse_sign_and_base(s),
       i=r[0],
       sign=r[1],
       base=r[2],
       len=caml_ml_string_length(s),
       threshold=-1 >>> 0,
       c=i < len?caml_string_unsafe_get(s,i):0,
       d=caml_parse_digit(c);
      if(d < 0 || d >= base)caml_failwith("int_of_string");
      var res=d;
      for(i++;i < len;i++)
       {c = caml_string_unsafe_get(s,i);
        if(c == 95)continue;
        d = caml_parse_digit(c);
        if(d < 0 || d >= base)break;
        res = base * res + d;
        if(res > threshold)caml_failwith("int_of_string")}
      if(i != len)caml_failwith("int_of_string");
      res = sign * res;
      if(base == 10 && (res | 0) != res)caml_failwith("int_of_string");
      return res | 0}
    function caml_js_wrap_callback(f)
     {return function()
       {return arguments.length > 0
                ?caml_call_gen(f,arguments)
                :caml_call_gen(f,[undefined])}}
    function caml_lessequal(x,y){return +(caml_compare_val(x,y,false) <= 0)}
    function caml_lessthan(x,y){return +(caml_compare_val(x,y,false) < 0)}
    function caml_ml_bytes_length(s){return s.l}
    function caml_raise_sys_error(msg)
     {caml_raise_with_string(caml_global_data.Sys_error,msg)}
    var caml_ml_channels=new Array();
    function caml_ml_flush(chanid)
     {var chan=caml_ml_channels[chanid];
      if(!chan.opened)caml_raise_sys_error("Cannot flush a closed channel");
      if(!chan.buffer || chan.buffer == "")return 0;
      if
       (chan.fd
        &&
        caml_global_data.fds[chan.fd]
        &&
        caml_global_data.fds[chan.fd].output)
       {var output=caml_global_data.fds[chan.fd].output;
        switch(output.length)
         {case 2:output(chanid,chan.buffer);break;default:output(chan.buffer)}}
      chan.buffer = "";
      return 0}
    if(joo_global_object.process && joo_global_object.process.cwd)
     var caml_current_dir=joo_global_object.process.cwd();
    else
     var caml_current_dir="/static";
    if(caml_current_dir.slice(-1) !== "/")caml_current_dir += "/";
    function caml_make_path(name)
     {name = name instanceof MlString?name.toString():name;
      if(name.charCodeAt(0) != 47)name = caml_current_dir + name;
      var comp=name.split("/"),ncomp=[];
      for(var i=0;i < comp.length;i++)
       switch(comp[i])
        {case "..":if(ncomp.length > 1)ncomp.pop();break;
         case ".":break;
         case "":if(ncomp.length == 0)ncomp.push("");break;
         default:ncomp.push(comp[i]);break}
      ncomp.orig = name;
      return ncomp}
    function caml_raise_no_such_file(name)
     {name = name instanceof MlString?name.toString():name;
      caml_raise_sys_error(name + ": No such file or directory")}
    function caml_string_of_array(a){return new MlString(4,a,a.length)}
    function caml_string_get(s,i)
     {if(i >>> 0 >= s.l)caml_string_bound_error();
      return caml_string_unsafe_get(s,i)}
    function caml_create_string(len)
     {if(len < 0)caml_invalid_argument("String.create");
      return new MlString(len?2:9,"",len)}
    function MlFile(){}
    function MlFakeFile(content){this.data = content}
    MlFakeFile.prototype = new MlFile();
    MlFakeFile.prototype.truncate
    =
    function(len)
     {var old=this.data;
      this.data = caml_create_string(len | 0);
      caml_blit_string(old,0,this.data,0,len)};
    MlFakeFile.prototype.length
    =
    function(){return caml_ml_string_length(this.data)};
    MlFakeFile.prototype.write
    =
    function(offset,buf,pos,len)
     {var clen=this.length();
      if(offset + len >= clen)
       {var new_str=caml_create_string(offset + len),old_data=this.data;
        this.data = new_str;
        caml_blit_string(old_data,0,this.data,0,clen)}
      caml_blit_string(buf,pos,this.data,offset,len);
      return 0};
    MlFakeFile.prototype.read
    =
    function(offset,buf,pos,len)
     {var clen=this.length();
      caml_blit_string(this.data,offset,buf,pos,len);
      return 0};
    MlFakeFile.prototype.read_one
    =
    function(offset){return caml_string_get(this.data,offset)};
    MlFakeFile.prototype.close = function(){};
    MlFakeFile.prototype.constructor = MlFakeFile;
    function MlFakeDevice(root,f)
     {this.content = {};this.root = root;this.lookupFun = f}
    MlFakeDevice.prototype.nm = function(name){return this.root + name};
    MlFakeDevice.prototype.lookup
    =
    function(name)
     {if(!this.content[name] && this.lookupFun)
       {var
         res=
          this.lookupFun(caml_new_string(this.root),caml_new_string(name));
        if(res != 0)this.content[name] = new MlFakeFile(res[1])}};
    MlFakeDevice.prototype.exists
    =
    function(name){this.lookup(name);return this.content[name]?1:0};
    MlFakeDevice.prototype.readdir
    =
    function(name)
     {var
       name_slash=name == ""?"":name + "/",
       r=new RegExp("^" + name_slash + "([^/]*)"),
       seen={},
       a=[];
      for(var n in this.content)
       {var m=n.match(r);if(m && !seen[m[1]]){seen[m[1]] = true;a.push(m[1])}}
      return a};
    MlFakeDevice.prototype.is_dir
    =
    function(name)
     {var
       name_slash=name == ""?"":name + "/",
       r=new RegExp("^" + name_slash + "([^/]*)"),
       a=[];
      for(var n in this.content){var m=n.match(r);if(m)return 1}
      return 0};
    MlFakeDevice.prototype.unlink
    =
    function(name)
     {var ok=this.content[name]?true:false;
      delete this.content[name];
      return ok};
    MlFakeDevice.prototype.open
    =
    function(name,f)
     {if(f.rdonly && f.wronly)
       caml_raise_sys_error
        (this.nm(name)
         +
         " : flags Open_rdonly and Open_wronly are not compatible");
      if(f.text && f.binary)
       caml_raise_sys_error
        (this.nm(name)
         +
         " : flags Open_text and Open_binary are not compatible");
      this.lookup(name);
      if(this.content[name])
       {if(this.is_dir(name))
         caml_raise_sys_error(this.nm(name) + " : is a directory");
        if(f.create && f.excl)
         caml_raise_sys_error(this.nm(name) + " : file already exists");
        var file=this.content[name];
        if(f.truncate)file.truncate();
        return file}
      else
       if(f.create)
        {this.content[name] = new MlFakeFile(caml_create_string(0));
         return this.content[name]}
       else
        caml_raise_no_such_file(this.nm(name))};
    MlFakeDevice.prototype.register
    =
    function(name,content)
     {if(this.content[name])
       caml_raise_sys_error(this.nm(name) + " : file already exists");
      if(content instanceof MlString)
       this.content[name] = new MlFakeFile(content);
      else
       if(content instanceof Array)
        this.content[name] = new MlFakeFile(caml_string_of_array(content));
       else
        if(content.toString)
         {var mlstring=caml_new_string(content.toString());
          this.content[name] = new MlFakeFile(mlstring)}};
    MlFakeDevice.prototype.constructor = MlFakeDevice;
    function caml_array_of_string(s)
     {if(s.t != 4)caml_convert_string_to_array(s);return s.c}
    function caml_string_unsafe_set(s,i,c)
     {c &= 255;
      if(s.t != 4)
       {if(i == s.c.length)
         {s.c += String.fromCharCode(c);if(i + 1 == s.l)s.t = 0;return 0}
        caml_convert_string_to_array(s)}
      s.c[i] = c;
      return 0}
    function caml_string_set(s,i,c)
     {if(i >>> 0 >= s.l)caml_string_bound_error();
      return caml_string_unsafe_set(s,i,c)}
    var Buffer=joo_global_object.Buffer;
    function MlNodeFile(fd){this.fs = require("fs");this.fd = fd}
    MlNodeFile.prototype = new MlFile();
    MlNodeFile.prototype.truncate
    =
    function(len){this.fs.ftruncateSync(this.fd,len | 0)};
    MlNodeFile.prototype.length
    =
    function(){return this.fs.fstatSync(this.fd).size};
    MlNodeFile.prototype.write
    =
    function(offset,buf,buf_offset,len)
     {var a=caml_array_of_string(buf);
      if(!a instanceof joo_global_object.Uint8Array)
       a = new (joo_global_object.Uint8Array)(a);
      var buffer=new Buffer(a);
      this.fs.writeSync(this.fd,buffer,buf_offset,len,offset);
      return 0};
    MlNodeFile.prototype.read
    =
    function(offset,buf,buf_offset,len)
     {var a=caml_array_of_string(buf);
      if(!(a instanceof joo_global_object.Uint8Array))
       a = new (joo_global_object.Uint8Array)(a);
      var buffer=new Buffer(a);
      this.fs.readSync(this.fd,buffer,buf_offset,len,offset);
      for(var i=0;i < len;i++)
       caml_string_set(buf,buf_offset + i,buffer[buf_offset + i]);
      return 0};
    MlNodeFile.prototype.read_one
    =
    function(offset)
     {var a=new (joo_global_object.Uint8Array)(1),buffer=new Buffer(a);
      this.fs.readSync(this.fd,buffer,0,1,offset);
      return buffer[0]};
    MlNodeFile.prototype.close = function(){this.fs.closeSync(this.fd)};
    MlNodeFile.prototype.constructor = MlNodeFile;
    function MlNodeDevice(root){this.fs = require("fs");this.root = root}
    MlNodeDevice.prototype.nm = function(name){return this.root + name};
    MlNodeDevice.prototype.exists
    =
    function(name){return this.fs.existsSync(this.nm(name))?1:0};
    MlNodeDevice.prototype.readdir
    =
    function(name){return this.fs.readdirSync(this.nm(name))};
    MlNodeDevice.prototype.is_dir
    =
    function(name){return this.fs.statSync(this.nm(name)).isDirectory()?1:0};
    MlNodeDevice.prototype.unlink
    =
    function(name)
     {var b=this.fs.existsSync(this.nm(name))?1:0;
      this.fs.unlinkSync(this.nm(name));
      return b};
    MlNodeDevice.prototype.open
    =
    function(name,f)
     {var consts=require("constants"),res=0;
      for(var key in f)
       switch(key)
        {case "rdonly":res |= consts.O_RDONLY;break;
         case "wronly":res |= consts.O_WRONLY;break;
         case "append":res |= consts.O_WRONLY | consts.O_APPEND;break;
         case "create":res |= consts.O_CREAT;break;
         case "truncate":res |= consts.O_TRUNC;break;
         case "excl":res |= consts.O_EXCL;break;
         case "binary":res |= consts.O_BINARY;break;
         case "text":res |= consts.O_TEXT;break;
         case "nonblock":res |= consts.O_NONBLOCK;break
         }
      var fd=this.fs.openSync(this.nm(name),res);
      return new MlNodeFile(fd)};
    MlNodeDevice.prototype.rename
    =
    function(o,n){this.fs.renameSync(this.nm(o),this.nm(n))};
    MlNodeDevice.prototype.constructor = MlNodeDevice;
    var jsoo_mount_point=[];
    if(typeof require == "undefined")
     jsoo_mount_point.push({path:"/",device:new MlFakeDevice("/")});
    else
     jsoo_mount_point.push({path:"/",device:new MlNodeDevice("/")});
    jsoo_mount_point.push
     ({path:"/static/",device:new MlFakeDevice("/static/")});
    function resolve_fs_device(name)
     {var
       path=caml_make_path(name),
       name=path.join("/"),
       name_slash=name + "/",
       res;
      for(var i=0;i < jsoo_mount_point.length;i++)
       {var m=jsoo_mount_point[i];
        if
         (name_slash.search(m.path)
          ==
          0
          &&
          (!res || res.path.length < m.path.length))
         res
         =
         {path:m.path,
          device:m.device,
          rest:name.substring(m.path.length,name.length)}}
      return res}
    function caml_std_output(chanid,s)
     {var
       chan=caml_ml_channels[chanid],
       str=caml_new_string(s),
       slen=caml_ml_string_length(str);
      chan.file.write(chan.offset,str,0,slen);
      chan.offset += slen;
      return 0}
    function js_print_stderr(s)
     {var g=joo_global_object;
      if(g.process && g.process.stdout && g.process.stdout.write)
       g.process.stderr.write(s);
      else
       {if(s.charCodeAt(s.length - 1) == 10)s = s.substr(0,s.length - 1);
        var v=g.console;
        v && v.error && v.error(s)}}
    function js_print_stdout(s)
     {var g=joo_global_object;
      if(g.process && g.process.stdout && g.process.stdout.write)
       g.process.stdout.write(s);
      else
       {if(s.charCodeAt(s.length - 1) == 10)s = s.substr(0,s.length - 1);
        var v=g.console;
        v && v.log && v.log(s)}}
    function caml_sys_open_internal(idx,output,file,flags)
     {if(caml_global_data.fds === undefined)
       caml_global_data.fds = new Array();
      flags = flags?flags:{};
      var info={};
      info.file = file;
      info.offset = flags.append?file.length():0;
      info.flags = flags;
      info.output = output;
      caml_global_data.fds[idx] = info;
      if(!caml_global_data.fd_last_idx || idx > caml_global_data.fd_last_idx)
       caml_global_data.fd_last_idx = idx;
      return idx}
    function caml_sys_open(name,flags,_perms)
     {var f={};
      while(flags)
       {switch(flags[1])
         {case 0:f.rdonly = 1;break;
          case 1:f.wronly = 1;break;
          case 2:f.append = 1;break;
          case 3:f.create = 1;break;
          case 4:f.truncate = 1;break;
          case 5:f.excl = 1;break;
          case 6:f.binary = 1;break;
          case 7:f.text = 1;break;
          case 8:f.nonblock = 1;break
          }
        flags = flags[2]}
      if(f.rdonly && f.wronly)
       caml_raise_sys_error
        (name.toString()
         +
         " : flags Open_rdonly and Open_wronly are not compatible");
      if(f.text && f.binary)
       caml_raise_sys_error
        (name.toString()
         +
         " : flags Open_text and Open_binary are not compatible");
      var
       root=resolve_fs_device(name),
       file=root.device.open(root.rest,f),
       idx=caml_global_data.fd_last_idx?caml_global_data.fd_last_idx:0;
      return caml_sys_open_internal(idx + 1,caml_std_output,file,f)}
    caml_sys_open_internal
     (0,caml_std_output,new MlFakeFile(caml_create_string(0)));
    caml_sys_open_internal
     (1,js_print_stdout,new MlFakeFile(caml_create_string(0)));
    caml_sys_open_internal
     (2,js_print_stderr,new MlFakeFile(caml_create_string(0)));
    function caml_ml_open_descriptor_in(fd)
     {var data=caml_global_data.fds[fd];
      if(data.flags.wronly)caml_raise_sys_error("fd " + fd + " is writeonly");
      var
       channel=
        {file:data.file,
         offset:data.offset,
         fd:fd,
         opened:true,
         out:false,
         refill:null};
      caml_ml_channels[channel.fd] = channel;
      return channel.fd}
    function caml_ml_open_descriptor_out(fd)
     {var data=caml_global_data.fds[fd];
      if(data.flags.rdonly)caml_raise_sys_error("fd " + fd + " is readonly");
      var
       channel=
        {file:data.file,
         offset:data.offset,
         fd:fd,
         opened:true,
         out:true,
         buffer:""};
      caml_ml_channels[channel.fd] = channel;
      return channel.fd}
    function caml_ml_out_channels_list()
     {var l=0;
      for(var c=0;c < caml_ml_channels.length;c++)
       if
        (caml_ml_channels[c]
         &&
         caml_ml_channels[c].opened
         &&
         caml_ml_channels[c].out)
        l = [0,caml_ml_channels[c],l];
      return l}
    function caml_ml_output(chanid,buffer,offset,len)
     {var chan=caml_ml_channels[chanid];
      if(!chan.opened)
       caml_raise_sys_error("Cannot output to a closed channel");
      var string;
      if(offset == 0 && caml_ml_string_length(buffer) == len)
       string = buffer;
      else
       {string = caml_create_string(len);
        caml_blit_string(buffer,offset,string,0,len)}
      var jsstring=string.toString(),id=jsstring.lastIndexOf("\n");
      if(id < 0)
       chan.buffer += jsstring;
      else
       {chan.buffer += jsstring.substr(0,id + 1);
        caml_ml_flush(chanid);
        chan.buffer += jsstring.substr(id + 1)}
      return 0}
    if(!Math.imul)
     Math.imul
     =
     function(x,y){y |= 0;return ((x >> 16) * y << 16) + (x & 65535) * y | 0};
    var caml_mul=Math.imul;
    function caml_notequal(x,y){return +(caml_compare_val(x,y,false) != 0)}
    function caml_obj_tag(x)
     {return x instanceof Array?x[0]:x instanceof MlString?252:1e3}
    function caml_register_global(n,v,name_opt)
     {caml_global_data[n + 1] = v;if(name_opt)caml_global_data[name_opt] = v}
    var caml_named_values={};
    function caml_register_named_value(nm,v)
     {caml_named_values[caml_bytes_of_string(nm)] = v;return 0}
    function caml_string_equal(s1,s2)
     {if(s1 === s2)return 1;
      s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c == s2.c?1:0}
    function caml_string_notequal(s1,s2){return 1 - caml_string_equal(s1,s2)}
    function caml_sys_const_max_wosize(){return 2147483647 / 4 | 0}
    function caml_trampoline(res)
     {var c=1;
      while(res && res.joo_tramp)
       {res = res.joo_tramp.apply(null,res.joo_args);c++}
      return res}
    function caml_trampoline_return(f,args)
     {return {joo_tramp:f,joo_args:args}}
    function caml_return_exn_constant(tag){return tag}
    function caml_named_value(nm){return caml_named_values[nm]}
    function caml_wrap_exception(e)
     {if(e instanceof Array)return e;
      if
       (joo_global_object.RangeError
        &&
        e instanceof joo_global_object.RangeError
        &&
        e.message
        &&
        e.message.match(/maximum call stack/i))
       return caml_return_exn_constant(caml_global_data.Stack_overflow);
      if
       (joo_global_object.InternalError
        &&
        e instanceof joo_global_object.InternalError
        &&
        e.message
        &&
        e.message.match(/too much recursion/i))
       return caml_return_exn_constant(caml_global_data.Stack_overflow);
      if(e instanceof joo_global_object.Error && caml_named_value("jsError"))
       return [0,caml_named_value("jsError"),e];
      return [0,caml_global_data.Failure,caml_js_to_string(String(e))]}
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4?f(a0,a1,a2,a3):caml_call_gen(f,[a0,a1,a2,a3])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5?f(a0,a1,a2,a3,a4):caml_call_gen(f,[a0,a1,a2,a3,a4])}
    var
     Out_of_memory=[248,caml_new_string("Out_of_memory"),-1],
     Sys_error=[248,caml_new_string("Sys_error"),-2],
     Failure=[248,caml_new_string("Failure"),-3],
     Invalid_argument=[248,caml_new_string("Invalid_argument"),-4],
     End_of_file=[248,caml_new_string("End_of_file"),-5],
     Division_by_zero=[248,caml_new_string("Division_by_zero"),-6],
     Not_found=[248,caml_new_string("Not_found"),-7],
     Match_failure=[248,caml_new_string("Match_failure"),-8],
     Stack_overflow=[248,caml_new_string("Stack_overflow"),-9],
     Sys_blocked_io=[248,caml_new_string("Sys_blocked_io"),-10],
     Assert_failure=[248,caml_new_string("Assert_failure"),-11],
     Undefined_recursive_module=
      [248,caml_new_string("Undefined_recursive_module"),-12],
     locfmt=
      [0,
       [11,
        caml_new_string('File "'),
        [2,
         0,
         [11,
          caml_new_string('", line '),
          [4,
           0,
           0,
           0,
           [11,
            caml_new_string(", characters "),
            [4,0,0,0,[12,45,[4,0,0,0,[11,caml_new_string(": "),[2,0,0]]]]]]]]]],
       caml_new_string('File "%s", line %d, characters %d-%d: %s')],
     state$0=[0,0,0,0,0,0,0,0],
     state$1=[0,0,0],
     state$2=[0,0,0,0,0,0,0,0,0];
    caml_register_global
     (11,Undefined_recursive_module,"Undefined_recursive_module");
    caml_register_global(10,Assert_failure,"Assert_failure");
    caml_register_global(9,Sys_blocked_io,"Sys_blocked_io");
    caml_register_global(8,Stack_overflow,"Stack_overflow");
    caml_register_global(7,Match_failure,"Match_failure");
    caml_register_global(6,Not_found,"Not_found");
    caml_register_global(5,Division_by_zero,"Division_by_zero");
    caml_register_global(4,End_of_file,"End_of_file");
    caml_register_global(3,Invalid_argument,"Invalid_argument");
    caml_register_global(2,Failure,"Failure");
    caml_register_global(1,Sys_error,"Sys_error");
    caml_register_global(0,Out_of_memory,"Out_of_memory");
    var
     _g_=caml_new_string("output_substring"),
     _f_=caml_new_string("%.12g"),
     _e_=caml_new_string("."),
     _c_=caml_new_string("true"),
     _d_=caml_new_string("false"),
     _a_=[255,16777215,16777215,32751],
     _h_=caml_new_string("nth"),
     _i_=caml_new_string("List.nth"),
     _j_=caml_new_string("\\\\"),
     _k_=caml_new_string("\\'"),
     _l_=caml_new_string("\\b"),
     _m_=caml_new_string("\\t"),
     _n_=caml_new_string("\\n"),
     _o_=caml_new_string("\\r"),
     _r_=caml_new_string("String.blit / Bytes.blit_string"),
     _q_=caml_new_string("Bytes.blit"),
     _p_=caml_new_string("String.sub / Bytes.sub"),
     _t_=caml_new_string(""),
     _s_=caml_new_string("String.concat"),
     _v_=caml_new_string("Buffer.add_substring/add_subbytes"),
     _u_=caml_new_string("Buffer.add: cannot grow buffer"),
     _E_=caml_new_string("%c"),
     _F_=caml_new_string("%s"),
     _G_=caml_new_string("%i"),
     _H_=caml_new_string("%li"),
     _I_=caml_new_string("%ni"),
     _J_=caml_new_string("%Li"),
     _K_=caml_new_string("%f"),
     _L_=caml_new_string("%B"),
     _M_=caml_new_string("%{"),
     _N_=caml_new_string("%}"),
     _O_=caml_new_string("%("),
     _P_=caml_new_string("%)"),
     _Q_=caml_new_string("%a"),
     _R_=caml_new_string("%t"),
     _S_=caml_new_string("%?"),
     _T_=caml_new_string("%r"),
     _U_=caml_new_string("%_r"),
     _V_=[0,caml_new_string("camlinternalFormat.ml"),845,23],
     _ae_=[0,caml_new_string("camlinternalFormat.ml"),809,21],
     _Y_=[0,caml_new_string("camlinternalFormat.ml"),810,21],
     _af_=[0,caml_new_string("camlinternalFormat.ml"),813,21],
     _Z_=[0,caml_new_string("camlinternalFormat.ml"),814,21],
     _ag_=[0,caml_new_string("camlinternalFormat.ml"),817,19],
     ___=[0,caml_new_string("camlinternalFormat.ml"),818,19],
     _ah_=[0,caml_new_string("camlinternalFormat.ml"),821,22],
     _$_=[0,caml_new_string("camlinternalFormat.ml"),822,22],
     _ai_=[0,caml_new_string("camlinternalFormat.ml"),826,30],
     _aa_=[0,caml_new_string("camlinternalFormat.ml"),827,30],
     _ac_=[0,caml_new_string("camlinternalFormat.ml"),831,26],
     _W_=[0,caml_new_string("camlinternalFormat.ml"),832,26],
     _ad_=[0,caml_new_string("camlinternalFormat.ml"),841,28],
     _X_=[0,caml_new_string("camlinternalFormat.ml"),842,28],
     _ab_=[0,caml_new_string("camlinternalFormat.ml"),846,23],
     _bf_=caml_new_string("%u"),
     _bd_=[0,caml_new_string("camlinternalFormat.ml"),1520,4],
     _be_=caml_new_string("Printf: bad conversion %["),
     _bg_=[0,caml_new_string("camlinternalFormat.ml"),1588,39],
     _bh_=[0,caml_new_string("camlinternalFormat.ml"),1611,31],
     _bi_=[0,caml_new_string("camlinternalFormat.ml"),1612,31],
     _bj_=caml_new_string("Printf: bad conversion %_"),
     _bk_=caml_new_string("@{"),
     _bl_=caml_new_string("@["),
     _bb_=caml_new_string("nan"),
     _bc_=caml_new_string("."),
     _a$_=caml_new_string("neg_infinity"),
     _ba_=caml_new_string("infinity"),
     _a__=caml_new_string("%.12g"),
     _aX_=caml_new_string("%nd"),
     _aY_=caml_new_string("%+nd"),
     _aZ_=caml_new_string("% nd"),
     _a0_=caml_new_string("%ni"),
     _a1_=caml_new_string("%+ni"),
     _a2_=caml_new_string("% ni"),
     _a3_=caml_new_string("%nx"),
     _a4_=caml_new_string("%#nx"),
     _a5_=caml_new_string("%nX"),
     _a6_=caml_new_string("%#nX"),
     _a7_=caml_new_string("%no"),
     _a8_=caml_new_string("%#no"),
     _a9_=caml_new_string("%nu"),
     _aK_=caml_new_string("%ld"),
     _aL_=caml_new_string("%+ld"),
     _aM_=caml_new_string("% ld"),
     _aN_=caml_new_string("%li"),
     _aO_=caml_new_string("%+li"),
     _aP_=caml_new_string("% li"),
     _aQ_=caml_new_string("%lx"),
     _aR_=caml_new_string("%#lx"),
     _aS_=caml_new_string("%lX"),
     _aT_=caml_new_string("%#lX"),
     _aU_=caml_new_string("%lo"),
     _aV_=caml_new_string("%#lo"),
     _aW_=caml_new_string("%lu"),
     _ax_=caml_new_string("%Ld"),
     _ay_=caml_new_string("%+Ld"),
     _az_=caml_new_string("% Ld"),
     _aA_=caml_new_string("%Li"),
     _aB_=caml_new_string("%+Li"),
     _aC_=caml_new_string("% Li"),
     _aD_=caml_new_string("%Lx"),
     _aE_=caml_new_string("%#Lx"),
     _aF_=caml_new_string("%LX"),
     _aG_=caml_new_string("%#LX"),
     _aH_=caml_new_string("%Lo"),
     _aI_=caml_new_string("%#Lo"),
     _aJ_=caml_new_string("%Lu"),
     _ak_=caml_new_string("%d"),
     _al_=caml_new_string("%+d"),
     _am_=caml_new_string("% d"),
     _an_=caml_new_string("%i"),
     _ao_=caml_new_string("%+i"),
     _ap_=caml_new_string("% i"),
     _aq_=caml_new_string("%x"),
     _ar_=caml_new_string("%#x"),
     _as_=caml_new_string("%X"),
     _at_=caml_new_string("%#X"),
     _au_=caml_new_string("%o"),
     _av_=caml_new_string("%#o"),
     _aw_=caml_new_string("%u"),
     _w_=caml_new_string("@]"),
     _x_=caml_new_string("@}"),
     _y_=caml_new_string("@?"),
     _z_=caml_new_string("@\n"),
     _A_=caml_new_string("@."),
     _B_=caml_new_string("@@"),
     _C_=caml_new_string("@%"),
     _D_=caml_new_string("@"),
     _aj_=caml_new_string("CamlinternalFormat.Type_mismatch"),
     _bp_=caml_new_string(""),
     _bq_=
      [0,[11,caml_new_string(", "),[2,0,[2,0,0]]],caml_new_string(", %s%s")],
     _bv_=caml_new_string("Out of memory"),
     _bw_=caml_new_string("Stack overflow"),
     _bx_=caml_new_string("Pattern matching failed"),
     _by_=caml_new_string("Assertion failed"),
     _bz_=caml_new_string("Undefined recursive module"),
     _br_=[0,[12,40,[2,0,[2,0,[12,41,0]]]],caml_new_string("(%s%s)")],
     _bs_=caml_new_string(""),
     _bt_=caml_new_string(""),
     _bu_=[0,[12,40,[2,0,[12,41,0]]],caml_new_string("(%s)")],
     _bo_=[0,[4,0,0,0,0],caml_new_string("%d")],
     _bm_=[0,[3,0,0],caml_new_string("%S")],
     _bn_=caml_new_string("_"),
     _bH_=[3,0,3],
     _bI_=caml_new_string("."),
     _bF_=caml_new_string(">"),
     _bG_=caml_new_string("</"),
     _bD_=caml_new_string(">"),
     _bE_=caml_new_string("<"),
     _bC_=caml_new_string("\n"),
     _bA_=caml_new_string("Format.Empty_queue"),
     _bB_=[0,caml_new_string("")],
     _bK_=caml_new_string("Js.Error"),
     _bP_=caml_new_string("select"),
     _bO_=caml_new_string("input"),
     _bN_=caml_new_string("div"),
     _bM_=caml_new_string("canvas"),
     _bL_=caml_new_string("button"),
     _bQ_=[0,caml_new_string("lib/xmlHttpRequest.ml"),86,2],
     _b0_=[0,[2,0,[12,58,[2,0,0]]],caml_new_string("%s:%s")],
     _bR_=caml_new_string("N"),
     _bS_=
      [0,
       [11,caml_new_string("I("),[7,3,0,0,[12,41,0]]],
       caml_new_string("I(%Li)")],
     _bT_=
      [0,
       [11,caml_new_string("I32("),[5,3,0,0,[12,41,0]]],
       caml_new_string("I32(%li)")],
     _bU_=
      [0,[11,caml_new_string("B("),[9,[12,41,0]]],caml_new_string("B(%b)")],
     _bV_=
      [0,
       [11,caml_new_string("F("),[8,9,0,0,[12,41,0]]],
       caml_new_string("F(%g)")],
     _bW_=
      [0,[11,caml_new_string("S("),[2,0,[12,41,0]]],caml_new_string("S(%s)")],
     _bX_=
      [0,[11,caml_new_string("D("),[2,0,[12,41,0]]],caml_new_string("D(%s)")],
     _bY_=caml_new_string(";"),
     _bZ_=[0,[12,91,[2,0,[12,93,0]]],caml_new_string("[%s]")],
     _b1_=caml_new_string(";"),
     _b2_=[0,[12,123,[2,0,[12,125,0]]],caml_new_string("{%s}")],
     _b6_=
      [0,
       [11,caml_new_string("Expected string, got '"),[2,0,[12,39,0]]],
       caml_new_string("Expected string, got '%s'")],
     _b5_=
      [0,
       [11,caml_new_string("Expected float, got '"),[2,0,[12,39,0]]],
       caml_new_string("Expected float, got '%s'")],
     _b4_=
      [0,
       [11,caml_new_string("Expected bool, got '"),[2,0,[12,39,0]]],
       caml_new_string("Expected bool, got '%s'")],
     _b3_=
      [0,
       [11,caml_new_string("Expected int, got '"),[2,0,[12,39,0]]],
       caml_new_string("Expected int, got '%s'")],
     _cs_=[0,[2,0,[12,46,[2,0,[12,101,[2,0,0]]]]],caml_new_string("%s.%se%s")],
     _ct_=caml_new_string("float"),
     _cq_=[0,[2,0,[12,46,[2,0,0]]],caml_new_string("%s.%s")],
     _cr_=caml_new_string("float"),
     _co_=
      [0,[2,0,[11,caml_new_string(".e"),[2,0,0]]],caml_new_string("%s.e%s")],
     _cp_=caml_new_string("float"),
     _cn_=caml_new_string("int"),
     _cv_=[3,0],
     _cw_=[2,4],
     _cx_=[0,3],
     _cy_=[1,3],
     _cz_=[7,0],
     _cu_=caml_new_string("start"),
     _cA_=[1,3],
     _cD_=[0,3],
     _cC_=[2,4],
     _cE_=[3,0],
     _cF_=[7,0],
     _cB_=caml_new_string("value"),
     _cJ_=caml_new_string("object_start"),
     _cI_=[7,0],
     _cG_=[1,0],
     _cH_=[7,0],
     _cK_=caml_new_string("object_elem_colon"),
     _cN_=caml_new_string("comma_or_end"),
     _cM_=caml_new_string("comma_or_end"),
     _cL_=caml_new_string("comma_or_end"),
     _cS_=caml_new_string("object_key"),
     _cP_=caml_new_string(" on stack at object_key"),
     _cQ_=caml_new_string("unexpected "),
     _cR_=caml_new_string("empty stack at object_key"),
     _cO_=[7,0],
     _cV_=[0,2],
     _cT_=[0,1],
     _cU_=caml_new_string("null"),
     _cZ_=[1,1],
     _cY_=[1,2],
     _cW_=[2,1],
     _cX_=caml_new_string("true"),
     _c0_=[2,1],
     _c2_=[2,3],
     _c3_=[2,0],
     _c4_=[2,2],
     _c1_=caml_new_string("false"),
     _c5_=caml_new_string("int"),
     _c6_=caml_new_string("float"),
     _c7_=caml_new_string("int_exp"),
     _c8_=caml_new_string("float_exp"),
     _c9_=caml_new_string("string"),
     _c__=caml_new_string("string_control"),
     _c$_=caml_new_string("string_unicode"),
     _da_=caml_new_string("parse called when parse_state is 'Done'"),
     _ck_=caml_new_string(" on stack at pop_stack"),
     _cl_=caml_new_string("unexpected "),
     _cm_=caml_new_string("empty stack at pop_stack"),
     _ci_=caml_new_string(" on stack at finish_value"),
     _cj_=caml_new_string("unexpected "),
     _cf_=caml_new_string("number"),
     _cc_=caml_new_string("object/array"),
     _cd_=caml_new_string("null"),
     _ch_=caml_new_string(""),
     _ca_=caml_new_string("value"),
     _ce_=caml_new_string("boolean"),
     _cg_=caml_new_string("string"),
     _cb_=caml_new_string("object"),
     _b8_=caml_new_string("object"),
     _b9_=caml_new_string("object_needing_key"),
     _b__=caml_new_string("object_needing_value"),
     _b$_=caml_new_string("array"),
     _b7_=caml_new_string("Jsonrpc.Parse_error"),
     _dg_=caml_new_string("BTC"),
     _dh_=caml_new_string("ETH"),
     _di_=caml_new_string("GBP"),
     _dj_=caml_new_string("USD"),
     _dk_=caml_new_string("XMR"),
     _dl_=[0,4393405],
     _dm_=[0,4245542],
     _dn_=[0,3545557],
     _do_=[0,3450105],
     _dp_=[0,3300913],
     _dc_=caml_new_string("XMR"),
     _dd_=caml_new_string("USD"),
     _de_=caml_new_string("GBP"),
     _df_=caml_new_string("BTC"),
     _db_=caml_new_string("ETH"),
     _dt_=caml_new_string("histoday"),
     _du_=caml_new_string("histohour"),
     _dv_=caml_new_string("histominute"),
     _dw_=[0,-1056243999],
     _dx_=[0,-438640655],
     _dy_=[0,-637747153],
     _dr_=caml_new_string("histohour"),
     _ds_=caml_new_string("histominute"),
     _dq_=caml_new_string("histoday"),
     _dB_=caml_new_string("close"),
     _dC_=caml_new_string("high"),
     _dD_=caml_new_string("low"),
     _dE_=caml_new_string("open"),
     _dF_=caml_new_string("time"),
     _dG_=caml_new_string("volumefrom"),
     _dH_=caml_new_string("volumeto"),
     _dU_=caml_new_string("volumeto"),
     _dV_=
      [0,
       [11,caml_new_string("Undefined field: Expecting '"),[2,0,[12,39,0]]],
       caml_new_string("Undefined field: Expecting '%s'")],
     _dS_=caml_new_string("volumefrom"),
     _dT_=
      [0,
       [11,caml_new_string("Undefined field: Expecting '"),[2,0,[12,39,0]]],
       caml_new_string("Undefined field: Expecting '%s'")],
     _dQ_=caml_new_string("open"),
     _dR_=
      [0,
       [11,caml_new_string("Undefined field: Expecting '"),[2,0,[12,39,0]]],
       caml_new_string("Undefined field: Expecting '%s'")],
     _dO_=caml_new_string("low"),
     _dP_=
      [0,
       [11,caml_new_string("Undefined field: Expecting '"),[2,0,[12,39,0]]],
       caml_new_string("Undefined field: Expecting '%s'")],
     _dM_=caml_new_string("high"),
     _dN_=
      [0,
       [11,caml_new_string("Undefined field: Expecting '"),[2,0,[12,39,0]]],
       caml_new_string("Undefined field: Expecting '%s'")],
     _dK_=caml_new_string("close"),
     _dL_=
      [0,
       [11,caml_new_string("Undefined field: Expecting '"),[2,0,[12,39,0]]],
       caml_new_string("Undefined field: Expecting '%s'")],
     _dI_=caml_new_string("time"),
     _dJ_=
      [0,
       [11,caml_new_string("Undefined field: Expecting '"),[2,0,[12,39,0]]],
       caml_new_string("Undefined field: Expecting '%s'")],
     _dA_=
      [0,
       [11,caml_new_string("Expecting Rpc.Dict, but found '"),[2,0,[12,39,0]]],
       caml_new_string("Expecting Rpc.Dict, but found '%s'")],
     _dX_=caml_new_string("conversionsymbol"),
     _dY_=caml_new_string("type"),
     _d1_=caml_new_string("conversionsymbol"),
     _d2_=
      [0,
       [11,caml_new_string("Undefined field: Expecting '"),[2,0,[12,39,0]]],
       caml_new_string("Undefined field: Expecting '%s'")],
     _dZ_=caml_new_string("type"),
     _d0_=
      [0,
       [11,caml_new_string("Undefined field: Expecting '"),[2,0,[12,39,0]]],
       caml_new_string("Undefined field: Expecting '%s'")],
     _dW_=
      [0,
       [11,caml_new_string("Expecting Rpc.Dict, but found '"),[2,0,[12,39,0]]],
       caml_new_string("Expecting Rpc.Dict, but found '%s'")],
     _d4_=caml_new_string("error"),
     _d5_=caml_new_string("success"),
     _d3_=
      [0,
       [11,
        caml_new_string
         ("Unhandled pattern when unmarshalling variant type: found '"),
        [2,0,[12,39,0]]],
       caml_new_string
        ("Unhandled pattern when unmarshalling variant type: found '%s'")],
     _ed_=
      [0,
       [11,caml_new_string("Expecting Rpc.Enum, but found '"),[2,0,[12,39,0]]],
       caml_new_string("Expecting Rpc.Enum, but found '%s'")],
     _d7_=caml_new_string("aggregated"),
     _d8_=caml_new_string("conversiontype"),
     _d9_=caml_new_string("data"),
     _d__=caml_new_string("firstvalueinarray"),
     _d$_=caml_new_string("response"),
     _ea_=caml_new_string("timefrom"),
     _eb_=caml_new_string("timeto"),
     _ec_=caml_new_string("type"),
     _es_=caml_new_string("conversiontype"),
     _et_=
      [0,
       [11,caml_new_string("Undefined field: Expecting '"),[2,0,[12,39,0]]],
       caml_new_string("Undefined field: Expecting '%s'")],
     _eq_=caml_new_string("firstvalueinarray"),
     _er_=
      [0,
       [11,caml_new_string("Undefined field: Expecting '"),[2,0,[12,39,0]]],
       caml_new_string("Undefined field: Expecting '%s'")],
     _eo_=caml_new_string("timefrom"),
     _ep_=
      [0,
       [11,caml_new_string("Undefined field: Expecting '"),[2,0,[12,39,0]]],
       caml_new_string("Undefined field: Expecting '%s'")],
     _em_=caml_new_string("timeto"),
     _en_=
      [0,
       [11,caml_new_string("Undefined field: Expecting '"),[2,0,[12,39,0]]],
       caml_new_string("Undefined field: Expecting '%s'")],
     _ek_=caml_new_string("data"),
     _el_=
      [0,
       [11,caml_new_string("Undefined field: Expecting '"),[2,0,[12,39,0]]],
       caml_new_string("Undefined field: Expecting '%s'")],
     _ei_=caml_new_string("aggregated"),
     _ej_=
      [0,
       [11,caml_new_string("Undefined field: Expecting '"),[2,0,[12,39,0]]],
       caml_new_string("Undefined field: Expecting '%s'")],
     _eg_=caml_new_string("type"),
     _eh_=
      [0,
       [11,caml_new_string("Undefined field: Expecting '"),[2,0,[12,39,0]]],
       caml_new_string("Undefined field: Expecting '%s'")],
     _ee_=caml_new_string("response"),
     _ef_=
      [0,
       [11,caml_new_string("Undefined field: Expecting '"),[2,0,[12,39,0]]],
       caml_new_string("Undefined field: Expecting '%s'")],
     _d6_=
      [0,
       [11,caml_new_string("Expecting Rpc.Dict, but found '"),[2,0,[12,39,0]]],
       caml_new_string("Expecting Rpc.Dict, but found '%s'")],
     _dz_=
      [0,
       [11,
        caml_new_string("https://min-api.cryptocompare.com/data/"),
        [2,
         0,
         [11,
          caml_new_string("?fsym="),
          [2,
           0,
           [11,
            caml_new_string("&tsym="),
            [2,
             0,
             [11,
              caml_new_string("&limit="),
              [4,0,0,0,[11,caml_new_string("&aggregate=3&e=Kraken"),0]]]]]]]]],
       caml_new_string
        ("https://min-api.cryptocompare.com/data/%s?fsym=%s&tsym=%s&limit=%d&aggregate=3&e=Kraken")],
     _eL_=caml_new_string("load"),
     _eJ_=
      [0,
       [4,0,[0,2,2],0,[12,58,[4,0,[0,2,2],0,0]]],
       caml_new_string("%02d:%02d")],
     _eK_=
      [0,
       [4,0,[0,2,2],0,[12,47,[4,0,[0,2,2],0,[12,47,[4,0,[0,2,4],0,0]]]]],
       caml_new_string("%02d/%02d/%04d")],
     _eI_=[0,[8,0,[0,1,0],[0,6],0],caml_new_string("%0.06f")],
     _eH_=caml_new_string("graph"),
     _eF_=
      [0,
       [11,caml_new_string("Overall low: "),[8,0,0,0,0]],
       caml_new_string("Overall low: %f")],
     _eG_=caml_new_string("overalllow"),
     _eD_=
      [0,
       [11,caml_new_string("Overall high: "),[8,0,0,0,0]],
       caml_new_string("Overall high: %f")],
     _eE_=caml_new_string("overallhigh"),
     _eB_=
      [0,
       [11,caml_new_string("Average low: "),[8,0,0,0,0]],
       caml_new_string("Average low: %f")],
     _eC_=caml_new_string("averagelow"),
     _ez_=
      [0,
       [11,caml_new_string("Average high: "),[8,0,0,0,0]],
       caml_new_string("Average high: %f")],
     _eA_=caml_new_string("averagehigh"),
     _ey_=caml_new_string("message"),
     _ex_=caml_new_string("limit"),
     _ew_=caml_new_string("frequency"),
     _ev_=caml_new_string("currencysecond"),
     _eu_=caml_new_string("currencyfirst");
    function erase_rel(param)
     {if(typeof param === "number")
       return 0;
      else
       switch(param[0])
        {case 0:var rest=param[1];return [0,erase_rel(rest)];
         case 1:var rest$0=param[1];return [1,erase_rel(rest$0)];
         case 2:var rest$1=param[1];return [2,erase_rel(rest$1)];
         case 3:var rest$2=param[1];return [3,erase_rel(rest$2)];
         case 4:var rest$3=param[1];return [4,erase_rel(rest$3)];
         case 5:var rest$4=param[1];return [5,erase_rel(rest$4)];
         case 6:var rest$5=param[1];return [6,erase_rel(rest$5)];
         case 7:var rest$6=param[1];return [7,erase_rel(rest$6)];
         case 8:
          var rest$7=param[2],ty=param[1];return [8,ty,erase_rel(rest$7)];
         case 9:
          var rest$8=param[3],ty1=param[1];
          return [9,ty1,ty1,erase_rel(rest$8)];
         case 10:var rest$9=param[1];return [10,erase_rel(rest$9)];
         case 11:var rest$10=param[1];return [11,erase_rel(rest$10)];
         case 12:var rest$11=param[1];return [12,erase_rel(rest$11)];
         case 13:var rest$12=param[1];return [13,erase_rel(rest$12)];
         default:var rest$13=param[1];return [14,erase_rel(rest$13)]}}
    function concat_fmtty(fmtty1,fmtty2)
     {if(typeof fmtty1 === "number")
       return fmtty2;
      else
       switch(fmtty1[0])
        {case 0:var rest=fmtty1[1];return [0,concat_fmtty(rest,fmtty2)];
         case 1:var rest$0=fmtty1[1];return [1,concat_fmtty(rest$0,fmtty2)];
         case 2:var rest$1=fmtty1[1];return [2,concat_fmtty(rest$1,fmtty2)];
         case 3:var rest$2=fmtty1[1];return [3,concat_fmtty(rest$2,fmtty2)];
         case 4:var rest$3=fmtty1[1];return [4,concat_fmtty(rest$3,fmtty2)];
         case 5:var rest$4=fmtty1[1];return [5,concat_fmtty(rest$4,fmtty2)];
         case 6:var rest$5=fmtty1[1];return [6,concat_fmtty(rest$5,fmtty2)];
         case 7:var rest$6=fmtty1[1];return [7,concat_fmtty(rest$6,fmtty2)];
         case 8:
          var rest$7=fmtty1[2],ty=fmtty1[1];
          return [8,ty,concat_fmtty(rest$7,fmtty2)];
         case 9:
          var rest$8=fmtty1[3],ty2=fmtty1[2],ty1=fmtty1[1];
          return [9,ty1,ty2,concat_fmtty(rest$8,fmtty2)];
         case 10:var rest$9=fmtty1[1];return [10,concat_fmtty(rest$9,fmtty2)];
         case 11:
          var rest$10=fmtty1[1];return [11,concat_fmtty(rest$10,fmtty2)];
         case 12:
          var rest$11=fmtty1[1];return [12,concat_fmtty(rest$11,fmtty2)];
         case 13:
          var rest$12=fmtty1[1];return [13,concat_fmtty(rest$12,fmtty2)];
         default:
          var rest$13=fmtty1[1];return [14,concat_fmtty(rest$13,fmtty2)]}}
    function concat_fmt(fmt1,fmt2)
     {if(typeof fmt1 === "number")
       return fmt2;
      else
       switch(fmt1[0])
        {case 0:var rest=fmt1[1];return [0,concat_fmt(rest,fmt2)];
         case 1:var rest$0=fmt1[1];return [1,concat_fmt(rest$0,fmt2)];
         case 2:
          var rest$1=fmt1[2],pad=fmt1[1];
          return [2,pad,concat_fmt(rest$1,fmt2)];
         case 3:
          var rest$2=fmt1[2],pad$0=fmt1[1];
          return [3,pad$0,concat_fmt(rest$2,fmt2)];
         case 4:
          var rest$3=fmt1[4],prec=fmt1[3],pad$1=fmt1[2],iconv=fmt1[1];
          return [4,iconv,pad$1,prec,concat_fmt(rest$3,fmt2)];
         case 5:
          var rest$4=fmt1[4],prec$0=fmt1[3],pad$2=fmt1[2],iconv$0=fmt1[1];
          return [5,iconv$0,pad$2,prec$0,concat_fmt(rest$4,fmt2)];
         case 6:
          var rest$5=fmt1[4],prec$1=fmt1[3],pad$3=fmt1[2],iconv$1=fmt1[1];
          return [6,iconv$1,pad$3,prec$1,concat_fmt(rest$5,fmt2)];
         case 7:
          var rest$6=fmt1[4],prec$2=fmt1[3],pad$4=fmt1[2],iconv$2=fmt1[1];
          return [7,iconv$2,pad$4,prec$2,concat_fmt(rest$6,fmt2)];
         case 8:
          var rest$7=fmt1[4],prec$3=fmt1[3],pad$5=fmt1[2],fconv=fmt1[1];
          return [8,fconv,pad$5,prec$3,concat_fmt(rest$7,fmt2)];
         case 9:var rest$8=fmt1[1];return [9,concat_fmt(rest$8,fmt2)];
         case 10:var rest$9=fmt1[1];return [10,concat_fmt(rest$9,fmt2)];
         case 11:
          var rest$10=fmt1[2],str=fmt1[1];
          return [11,str,concat_fmt(rest$10,fmt2)];
         case 12:
          var rest$11=fmt1[2],chr=fmt1[1];
          return [12,chr,concat_fmt(rest$11,fmt2)];
         case 13:
          var rest$12=fmt1[3],fmtty=fmt1[2],pad$6=fmt1[1];
          return [13,pad$6,fmtty,concat_fmt(rest$12,fmt2)];
         case 14:
          var rest$13=fmt1[3],fmtty$0=fmt1[2],pad$7=fmt1[1];
          return [14,pad$7,fmtty$0,concat_fmt(rest$13,fmt2)];
         case 15:var rest$14=fmt1[1];return [15,concat_fmt(rest$14,fmt2)];
         case 16:var rest$15=fmt1[1];return [16,concat_fmt(rest$15,fmt2)];
         case 17:
          var rest$16=fmt1[2],fmting_lit=fmt1[1];
          return [17,fmting_lit,concat_fmt(rest$16,fmt2)];
         case 18:
          var rest$17=fmt1[2],fmting_gen=fmt1[1];
          return [18,fmting_gen,concat_fmt(rest$17,fmt2)];
         case 19:var rest$18=fmt1[1];return [19,concat_fmt(rest$18,fmt2)];
         case 20:
          var rest$19=fmt1[3],char_set=fmt1[2],width_opt=fmt1[1];
          return [20,width_opt,char_set,concat_fmt(rest$19,fmt2)];
         case 21:
          var rest$20=fmt1[2],counter=fmt1[1];
          return [21,counter,concat_fmt(rest$20,fmt2)];
         case 22:var rest$21=fmt1[1];return [22,concat_fmt(rest$21,fmt2)];
         case 23:
          var rest$22=fmt1[2],ign=fmt1[1];
          return [23,ign,concat_fmt(rest$22,fmt2)];
         default:
          var rest$23=fmt1[3],f=fmt1[2],arity=fmt1[1];
          return [24,arity,f,concat_fmt(rest$23,fmt2)]}}
    function failwith(s){throw [0,Failure,s]}
    function invalid_arg(s){throw [0,Invalid_argument,s]}
    caml_fresh_oo_id(0);
    function min(x,y){return caml_lessequal(x,y)?x:y}
    function max(x,y){return caml_greaterequal(x,y)?x:y}
    function abs(x){return 0 <= x?x:-x | 0}
    var max_float=caml_int64_float_of_bits(_a_),max_int=2147483647;
    function _b_(s1,s2)
     {var
       l1=caml_ml_string_length(s1),
       l2=caml_ml_string_length(s2),
       s=caml_create_bytes(l1 + l2 | 0);
      caml_blit_string(s1,0,s,0,l1);
      caml_blit_string(s2,0,s,l1,l2);
      return s}
    function append(l1,l2)
     {if(l1){var tl=l1[2],hd=l1[1];return [0,hd,append(tl,l2)]}return l2}
    caml_ml_open_descriptor_in(0);
    var
     stdout=caml_ml_open_descriptor_out(1),
     stderr=caml_ml_open_descriptor_out(2);
    function flush_all(param)
     {function iter(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var l=param$0[2],a=param$0[1];
            try {caml_ml_flush(a)}catch(_iR_){}
            var param$0=l;
            continue}
          return 0}}
      return iter(caml_ml_out_channels_list(0))}
    var exit_function=[0,flush_all];
    function length(l)
     {var len=0,param=l;
      for(;;)
       {if(param)
         {var param$0=param[2],len$0=len + 1 | 0,len=len$0,param=param$0;
          continue}
        return len}}
    function nth(l,n)
     {if(0 <= n)
       {var l$0=l,n$0=n;
        for(;;)
         {if(l$0)
           {var l$1=l$0[2],a=l$0[1];
            if(0 === n$0)return a;
            var n$1=n$0 - 1 | 0,l$0=l$1,n$0=n$1;
            continue}
          return failwith(_h_)}}
      return invalid_arg(_i_)}
    function rev(l)
     {var l1=l,l2=0;
      for(;;)
       {if(l1){var l1$0=l1[2],a=l1[1],l2$0=[0,a,l2],l1=l1$0,l2=l2$0;continue}
        return l2}}
    function map(f,param)
     {if(param)
       {var l=param[2],a=param[1],r=caml_call1(f,a);return [0,r,map(f,l)]}
      return 0}
    function lowercase(c)
     {var switch$0=65 <= c?90 < c?0:1:0;
      if(!switch$0)
       {var switch$1=192 <= c?214 < c?0:1:0;
        if(!switch$1)
         {var switch$2=216 <= c?222 < c?1:0:1;if(switch$2)return c}}
      return c + 32 | 0}
    function lowercase_ascii(c)
     {if(65 <= c)if(!(90 < c))return c + 32 | 0;return c}
    function uppercase_ascii(c)
     {if(97 <= c)if(!(122 < c))return c - 32 | 0;return c}
    function make(n,c)
     {var s=caml_create_bytes(n);caml_fill_bytes(s,0,n,c);return s}
    function copy(s)
     {var len=caml_ml_bytes_length(s),r=caml_create_bytes(len);
      caml_blit_bytes(s,0,r,0,len);
      return r}
    function sub_string(b,ofs,len)
     {if(0 <= ofs)
       if(0 <= len)
        if(!((caml_ml_bytes_length(b) - len | 0) < ofs))
         {var r=caml_create_bytes(len);
          caml_blit_bytes(b,ofs,r,0,len);
          return r}
      return invalid_arg(_p_)}
    function blit(s1,ofs1,s2,ofs2,len)
     {if(0 <= len)
       if(0 <= ofs1)
        if(!((caml_ml_bytes_length(s1) - len | 0) < ofs1))
         if(0 <= ofs2)
          if(!((caml_ml_bytes_length(s2) - len | 0) < ofs2))
           return caml_blit_bytes(s1,ofs1,s2,ofs2,len);
      return invalid_arg(_q_)}
    function blit$0(s1,ofs1,s2,ofs2,len)
     {if(0 <= len)
       if(0 <= ofs1)
        if(!((caml_ml_string_length(s1) - len | 0) < ofs1))
         if(0 <= ofs2)
          if(!((caml_ml_bytes_length(s2) - len | 0) < ofs2))
           return caml_blit_string(s1,ofs1,s2,ofs2,len);
      return invalid_arg(_r_)}
    function map$0(f,s)
     {var l=caml_ml_bytes_length(s);
      if(0 === l)return s;
      var r=caml_create_bytes(l),_iP_=l - 1 | 0,_iO_=0;
      if(!(_iP_ < 0))
       {var i=_iO_;
        for(;;)
         {caml_string_unsafe_set
           (r,i,caml_call1(f,caml_string_unsafe_get(s,i)));
          var _iQ_=i + 1 | 0;
          if(_iP_ !== i){var i=_iQ_;continue}
          break}}
      return r}
    function make$0(n,c){return make(n,c)}
    function lowercase_ascii$0(s){return map$0(lowercase_ascii,s)}
    function lower(s){return map$0(lowercase,s)}
    var
     max_array_length=caml_sys_const_max_wosize(0),
     max_string_length=(4 * max_array_length | 0) - 1 | 0;
    caml_fresh_oo_id(0);
    function create(n)
     {var
       n$0=1 <= n?n:1,
       n$1=max_string_length < n$0?max_string_length:n$0,
       s=caml_create_bytes(n$1);
      return [0,s,0,n$1,s]}
    function resize(b,more)
     {var len=b[3],new_len=[0,len];
      for(;;)
       {if(new_len[1] < (b[2] + more | 0))
         {new_len[1] = 2 * new_len[1] | 0;continue}
        if(max_string_length < new_len[1])
         if((b[2] + more | 0) <= max_string_length)
          new_len[1] = max_string_length;
         else
          failwith(_u_);
        var new_buffer=caml_create_bytes(new_len[1]);
        blit(b[1],0,new_buffer,0,b[2]);
        b[1] = new_buffer;
        b[3] = new_len[1];
        return 0}}
    function add_string(b,s)
     {var len=caml_ml_string_length(s),new_position=b[2] + len | 0;
      if(b[3] < new_position)resize(b,len);
      blit$0(s,0,b[1],b[2],len);
      b[2] = new_position;
      return 0}
    var default_float_precision=-6;
    function buffer_create(init_size)
     {return [0,0,caml_create_bytes(init_size)]}
    function buffer_check_size(buf,overhead)
     {var
       len=caml_ml_bytes_length(buf[2]),
       min_len=buf[1] + overhead | 0,
       _iM_=len < min_len?1:0;
      if(_iM_)
       {var
         new_len=max(len * 2 | 0,min_len),
         new_str=caml_create_bytes(new_len);
        blit(buf[2],0,new_str,0,len);
        buf[2] = new_str;
        var _iN_=0}
      else
       var _iN_=_iM_;
      return _iN_}
    function buffer_add_char(buf,c)
     {buffer_check_size(buf,1);
      caml_bytes_set(buf[2],buf[1],c);
      buf[1] = buf[1] + 1 | 0;
      return 0}
    function buffer_add_string(buf,s)
     {var str_len=caml_ml_string_length(s);
      buffer_check_size(buf,str_len);
      blit$0(s,0,buf[2],buf[1],str_len);
      buf[1] = buf[1] + str_len | 0;
      return 0}
    function buffer_contents(buf){return sub_string(buf[2],0,buf[1])}
    function bprint_fmtty(buf,fmtty)
     {var fmtty$0=fmtty;
      for(;;)
       if(typeof fmtty$0 === "number")
        return 0;
       else
        switch(fmtty$0[0])
         {case 0:
           var fmtty$1=fmtty$0[1];
           buffer_add_string(buf,_E_);
           var fmtty$0=fmtty$1;
           continue;
          case 1:
           var fmtty$2=fmtty$0[1];
           buffer_add_string(buf,_F_);
           var fmtty$0=fmtty$2;
           continue;
          case 2:
           var fmtty$3=fmtty$0[1];
           buffer_add_string(buf,_G_);
           var fmtty$0=fmtty$3;
           continue;
          case 3:
           var fmtty$4=fmtty$0[1];
           buffer_add_string(buf,_H_);
           var fmtty$0=fmtty$4;
           continue;
          case 4:
           var fmtty$5=fmtty$0[1];
           buffer_add_string(buf,_I_);
           var fmtty$0=fmtty$5;
           continue;
          case 5:
           var fmtty$6=fmtty$0[1];
           buffer_add_string(buf,_J_);
           var fmtty$0=fmtty$6;
           continue;
          case 6:
           var fmtty$7=fmtty$0[1];
           buffer_add_string(buf,_K_);
           var fmtty$0=fmtty$7;
           continue;
          case 7:
           var fmtty$8=fmtty$0[1];
           buffer_add_string(buf,_L_);
           var fmtty$0=fmtty$8;
           continue;
          case 8:
           var fmtty$9=fmtty$0[2],sub_fmtty=fmtty$0[1];
           buffer_add_string(buf,_M_);
           bprint_fmtty(buf,sub_fmtty);
           buffer_add_string(buf,_N_);
           var fmtty$0=fmtty$9;
           continue;
          case 9:
           var fmtty$10=fmtty$0[3],sub_fmtty$0=fmtty$0[1];
           buffer_add_string(buf,_O_);
           bprint_fmtty(buf,sub_fmtty$0);
           buffer_add_string(buf,_P_);
           var fmtty$0=fmtty$10;
           continue;
          case 10:
           var fmtty$11=fmtty$0[1];
           buffer_add_string(buf,_Q_);
           var fmtty$0=fmtty$11;
           continue;
          case 11:
           var fmtty$12=fmtty$0[1];
           buffer_add_string(buf,_R_);
           var fmtty$0=fmtty$12;
           continue;
          case 12:
           var fmtty$13=fmtty$0[1];
           buffer_add_string(buf,_S_);
           var fmtty$0=fmtty$13;
           continue;
          case 13:
           var fmtty$14=fmtty$0[1];
           buffer_add_string(buf,_T_);
           var fmtty$0=fmtty$14;
           continue;
          default:
           var fmtty$15=fmtty$0[1];
           buffer_add_string(buf,_U_);
           var fmtty$0=fmtty$15;
           continue}}
    function symm(param)
     {if(typeof param === "number")
       return 0;
      else
       switch(param[0])
        {case 0:var rest=param[1];return [0,symm(rest)];
         case 1:var rest$0=param[1];return [1,symm(rest$0)];
         case 2:var rest$1=param[1];return [2,symm(rest$1)];
         case 3:var rest$2=param[1];return [3,symm(rest$2)];
         case 4:var rest$3=param[1];return [4,symm(rest$3)];
         case 5:var rest$4=param[1];return [5,symm(rest$4)];
         case 6:var rest$5=param[1];return [6,symm(rest$5)];
         case 7:var rest$6=param[1];return [7,symm(rest$6)];
         case 8:var rest$7=param[2],ty=param[1];return [8,ty,symm(rest$7)];
         case 9:
          var rest$8=param[3],ty2=param[2],ty1=param[1];
          return [9,ty2,ty1,symm(rest$8)];
         case 10:var rest$9=param[1];return [10,symm(rest$9)];
         case 11:var rest$10=param[1];return [11,symm(rest$10)];
         case 12:var rest$11=param[1];return [12,symm(rest$11)];
         case 13:var rest$12=param[1];return [13,symm(rest$12)];
         default:var rest$13=param[1];return [14,symm(rest$13)]}}
    function fmtty_rel_det(param)
     {if(typeof param === "number")
       {var
         _io_=function(param){return 0},
         _ip_=function(param){return 0},
         _iq_=function(param){return 0};
        return [0,function(param){return 0},_iq_,_ip_,_io_]}
      else
       switch(param[0])
        {case 0:
          var
           rest=param[1],
           match=fmtty_rel_det(rest),
           de=match[4],
           ed=match[3],
           af=match[2],
           fa=match[1],
           _ir_=function(param){caml_call1(af,0);return 0};
          return [0,function(param){caml_call1(fa,0);return 0},_ir_,ed,de];
         case 1:
          var
           rest$0=param[1],
           match$0=fmtty_rel_det(rest$0),
           de$0=match$0[4],
           ed$0=match$0[3],
           af$0=match$0[2],
           fa$0=match$0[1],
           _is_=function(param){caml_call1(af$0,0);return 0};
          return [0,
                  function(param){caml_call1(fa$0,0);return 0},
                  _is_,
                  ed$0,
                  de$0];
         case 2:
          var
           rest$1=param[1],
           match$1=fmtty_rel_det(rest$1),
           de$1=match$1[4],
           ed$1=match$1[3],
           af$1=match$1[2],
           fa$1=match$1[1],
           _it_=function(param){caml_call1(af$1,0);return 0};
          return [0,
                  function(param){caml_call1(fa$1,0);return 0},
                  _it_,
                  ed$1,
                  de$1];
         case 3:
          var
           rest$2=param[1],
           match$2=fmtty_rel_det(rest$2),
           de$2=match$2[4],
           ed$2=match$2[3],
           af$2=match$2[2],
           fa$2=match$2[1],
           _iu_=function(param){caml_call1(af$2,0);return 0};
          return [0,
                  function(param){caml_call1(fa$2,0);return 0},
                  _iu_,
                  ed$2,
                  de$2];
         case 4:
          var
           rest$3=param[1],
           match$3=fmtty_rel_det(rest$3),
           de$3=match$3[4],
           ed$3=match$3[3],
           af$3=match$3[2],
           fa$3=match$3[1],
           _iv_=function(param){caml_call1(af$3,0);return 0};
          return [0,
                  function(param){caml_call1(fa$3,0);return 0},
                  _iv_,
                  ed$3,
                  de$3];
         case 5:
          var
           rest$4=param[1],
           match$4=fmtty_rel_det(rest$4),
           de$4=match$4[4],
           ed$4=match$4[3],
           af$4=match$4[2],
           fa$4=match$4[1],
           _iw_=function(param){caml_call1(af$4,0);return 0};
          return [0,
                  function(param){caml_call1(fa$4,0);return 0},
                  _iw_,
                  ed$4,
                  de$4];
         case 6:
          var
           rest$5=param[1],
           match$5=fmtty_rel_det(rest$5),
           de$5=match$5[4],
           ed$5=match$5[3],
           af$5=match$5[2],
           fa$5=match$5[1],
           _ix_=function(param){caml_call1(af$5,0);return 0};
          return [0,
                  function(param){caml_call1(fa$5,0);return 0},
                  _ix_,
                  ed$5,
                  de$5];
         case 7:
          var
           rest$6=param[1],
           match$6=fmtty_rel_det(rest$6),
           de$6=match$6[4],
           ed$6=match$6[3],
           af$6=match$6[2],
           fa$6=match$6[1],
           _iy_=function(param){caml_call1(af$6,0);return 0};
          return [0,
                  function(param){caml_call1(fa$6,0);return 0},
                  _iy_,
                  ed$6,
                  de$6];
         case 8:
          var
           rest$7=param[2],
           match$7=fmtty_rel_det(rest$7),
           de$7=match$7[4],
           ed$7=match$7[3],
           af$7=match$7[2],
           fa$7=match$7[1],
           _iz_=function(param){caml_call1(af$7,0);return 0};
          return [0,
                  function(param){caml_call1(fa$7,0);return 0},
                  _iz_,
                  ed$7,
                  de$7];
         case 9:
          var
           rest$8=param[3],
           ty2=param[2],
           ty1=param[1],
           match$8=fmtty_rel_det(rest$8),
           de$8=match$8[4],
           ed$8=match$8[3],
           af$8=match$8[2],
           fa$8=match$8[1],
           ty=trans(symm(ty1),ty2),
           match$9=fmtty_rel_det(ty),
           jd=match$9[4],
           dj=match$9[3],
           ga=match$9[2],
           ag=match$9[1],
           _iA_=function(param){caml_call1(jd,0);caml_call1(de$8,0);return 0},
           _iB_=function(param){caml_call1(ed$8,0);caml_call1(dj,0);return 0},
           _iC_=function(param){caml_call1(ga,0);caml_call1(af$8,0);return 0};
          return [0,
                  function(param)
                   {caml_call1(fa$8,0);caml_call1(ag,0);return 0},
                  _iC_,
                  _iB_,
                  _iA_];
         case 10:
          var
           rest$9=param[1],
           match$10=fmtty_rel_det(rest$9),
           de$9=match$10[4],
           ed$9=match$10[3],
           af$9=match$10[2],
           fa$9=match$10[1],
           _iD_=function(param){caml_call1(af$9,0);return 0};
          return [0,
                  function(param){caml_call1(fa$9,0);return 0},
                  _iD_,
                  ed$9,
                  de$9];
         case 11:
          var
           rest$10=param[1],
           match$11=fmtty_rel_det(rest$10),
           de$10=match$11[4],
           ed$10=match$11[3],
           af$10=match$11[2],
           fa$10=match$11[1],
           _iE_=function(param){caml_call1(af$10,0);return 0};
          return [0,
                  function(param){caml_call1(fa$10,0);return 0},
                  _iE_,
                  ed$10,
                  de$10];
         case 12:
          var
           rest$11=param[1],
           match$12=fmtty_rel_det(rest$11),
           de$11=match$12[4],
           ed$11=match$12[3],
           af$11=match$12[2],
           fa$11=match$12[1],
           _iF_=function(param){caml_call1(af$11,0);return 0};
          return [0,
                  function(param){caml_call1(fa$11,0);return 0},
                  _iF_,
                  ed$11,
                  de$11];
         case 13:
          var
           rest$12=param[1],
           match$13=fmtty_rel_det(rest$12),
           de$12=match$13[4],
           ed$12=match$13[3],
           af$12=match$13[2],
           fa$12=match$13[1],
           _iG_=function(param){caml_call1(de$12,0);return 0},
           _iH_=function(param){caml_call1(ed$12,0);return 0},
           _iI_=function(param){caml_call1(af$12,0);return 0};
          return [0,
                  function(param){caml_call1(fa$12,0);return 0},
                  _iI_,
                  _iH_,
                  _iG_];
         default:
          var
           rest$13=param[1],
           match$14=fmtty_rel_det(rest$13),
           de$13=match$14[4],
           ed$13=match$14[3],
           af$13=match$14[2],
           fa$13=match$14[1],
           _iJ_=function(param){caml_call1(de$13,0);return 0},
           _iK_=function(param){caml_call1(ed$13,0);return 0},
           _iL_=function(param){caml_call1(af$13,0);return 0};
          return [0,
                  function(param){caml_call1(fa$13,0);return 0},
                  _iL_,
                  _iK_,
                  _iJ_]}}
    function trans(ty1,match)
     {if(typeof ty1 === "number")
       if(typeof match === "number")
        return 0;
       else
        switch(match[0])
         {case 10:var switch$0=0;break;
          case 11:var switch$0=1;break;
          case 12:var switch$0=2;break;
          case 13:var switch$0=3;break;
          case 14:var switch$0=4;break;
          case 8:var switch$0=5;break;
          case 9:var switch$0=6;break;
          default:throw [0,Assert_failure,_V_]}
      else
       switch(ty1[0])
        {case 0:
          var _h7_=ty1[1];
          if(typeof match === "number")
           var switch$1=1;
          else
           switch(match[0])
            {case 0:var rest2=match[1];return [0,trans(_h7_,rest2)];
             case 8:var switch$0=5,switch$1=0;break;
             case 9:var switch$0=6,switch$1=0;break;
             case 10:var switch$0=0,switch$1=0;break;
             case 11:var switch$0=1,switch$1=0;break;
             case 12:var switch$0=2,switch$1=0;break;
             case 13:var switch$0=3,switch$1=0;break;
             case 14:var switch$0=4,switch$1=0;break;
             default:var switch$1=1}
          if(switch$1)var switch$0=7;
          break;
         case 1:
          var _h8_=ty1[1];
          if(typeof match === "number")
           var switch$2=1;
          else
           switch(match[0])
            {case 1:var rest2$0=match[1];return [1,trans(_h8_,rest2$0)];
             case 8:var switch$0=5,switch$2=0;break;
             case 9:var switch$0=6,switch$2=0;break;
             case 10:var switch$0=0,switch$2=0;break;
             case 11:var switch$0=1,switch$2=0;break;
             case 12:var switch$0=2,switch$2=0;break;
             case 13:var switch$0=3,switch$2=0;break;
             case 14:var switch$0=4,switch$2=0;break;
             default:var switch$2=1}
          if(switch$2)var switch$0=7;
          break;
         case 2:
          var _h9_=ty1[1];
          if(typeof match === "number")
           var switch$3=1;
          else
           switch(match[0])
            {case 2:var rest2$1=match[1];return [2,trans(_h9_,rest2$1)];
             case 8:var switch$0=5,switch$3=0;break;
             case 9:var switch$0=6,switch$3=0;break;
             case 10:var switch$0=0,switch$3=0;break;
             case 11:var switch$0=1,switch$3=0;break;
             case 12:var switch$0=2,switch$3=0;break;
             case 13:var switch$0=3,switch$3=0;break;
             case 14:var switch$0=4,switch$3=0;break;
             default:var switch$3=1}
          if(switch$3)var switch$0=7;
          break;
         case 3:
          var _h__=ty1[1];
          if(typeof match === "number")
           var switch$4=1;
          else
           switch(match[0])
            {case 3:var rest2$2=match[1];return [3,trans(_h__,rest2$2)];
             case 8:var switch$0=5,switch$4=0;break;
             case 9:var switch$0=6,switch$4=0;break;
             case 10:var switch$0=0,switch$4=0;break;
             case 11:var switch$0=1,switch$4=0;break;
             case 12:var switch$0=2,switch$4=0;break;
             case 13:var switch$0=3,switch$4=0;break;
             case 14:var switch$0=4,switch$4=0;break;
             default:var switch$4=1}
          if(switch$4)var switch$0=7;
          break;
         case 4:
          var _h$_=ty1[1];
          if(typeof match === "number")
           var switch$5=1;
          else
           switch(match[0])
            {case 4:var rest2$3=match[1];return [4,trans(_h$_,rest2$3)];
             case 8:var switch$0=5,switch$5=0;break;
             case 9:var switch$0=6,switch$5=0;break;
             case 10:var switch$0=0,switch$5=0;break;
             case 11:var switch$0=1,switch$5=0;break;
             case 12:var switch$0=2,switch$5=0;break;
             case 13:var switch$0=3,switch$5=0;break;
             case 14:var switch$0=4,switch$5=0;break;
             default:var switch$5=1}
          if(switch$5)var switch$0=7;
          break;
         case 5:
          var _ia_=ty1[1];
          if(typeof match === "number")
           var switch$6=1;
          else
           switch(match[0])
            {case 5:var rest2$4=match[1];return [5,trans(_ia_,rest2$4)];
             case 8:var switch$0=5,switch$6=0;break;
             case 9:var switch$0=6,switch$6=0;break;
             case 10:var switch$0=0,switch$6=0;break;
             case 11:var switch$0=1,switch$6=0;break;
             case 12:var switch$0=2,switch$6=0;break;
             case 13:var switch$0=3,switch$6=0;break;
             case 14:var switch$0=4,switch$6=0;break;
             default:var switch$6=1}
          if(switch$6)var switch$0=7;
          break;
         case 6:
          var _ib_=ty1[1];
          if(typeof match === "number")
           var switch$7=1;
          else
           switch(match[0])
            {case 6:var rest2$5=match[1];return [6,trans(_ib_,rest2$5)];
             case 8:var switch$0=5,switch$7=0;break;
             case 9:var switch$0=6,switch$7=0;break;
             case 10:var switch$0=0,switch$7=0;break;
             case 11:var switch$0=1,switch$7=0;break;
             case 12:var switch$0=2,switch$7=0;break;
             case 13:var switch$0=3,switch$7=0;break;
             case 14:var switch$0=4,switch$7=0;break;
             default:var switch$7=1}
          if(switch$7)var switch$0=7;
          break;
         case 7:
          var _ic_=ty1[1];
          if(typeof match === "number")
           var switch$8=1;
          else
           switch(match[0])
            {case 7:var rest2$6=match[1];return [7,trans(_ic_,rest2$6)];
             case 8:var switch$0=5,switch$8=0;break;
             case 9:var switch$0=6,switch$8=0;break;
             case 10:var switch$0=0,switch$8=0;break;
             case 11:var switch$0=1,switch$8=0;break;
             case 12:var switch$0=2,switch$8=0;break;
             case 13:var switch$0=3,switch$8=0;break;
             case 14:var switch$0=4,switch$8=0;break;
             default:var switch$8=1}
          if(switch$8)var switch$0=7;
          break;
         case 8:
          var _id_=ty1[2],_ie_=ty1[1];
          if(typeof match === "number")
           var switch$9=1;
          else
           switch(match[0])
            {case 8:
              var rest2$7=match[2],ty2=match[1],_if_=trans(_id_,rest2$7);
              return [8,trans(_ie_,ty2),_if_];
             case 10:var switch$0=0,switch$9=0;break;
             case 11:var switch$0=1,switch$9=0;break;
             case 12:var switch$0=2,switch$9=0;break;
             case 13:var switch$0=3,switch$9=0;break;
             case 14:var switch$0=4,switch$9=0;break;
             default:var switch$9=1}
          if(switch$9)throw [0,Assert_failure,_ac_];
          break;
         case 9:
          var _ig_=ty1[3],_ih_=ty1[2],_ii_=ty1[1];
          if(typeof match === "number")
           var switch$10=1;
          else
           switch(match[0])
            {case 8:var switch$0=5,switch$10=0;break;
             case 9:
              var
               rest2$8=match[3],
               ty22=match[2],
               ty21=match[1],
               ty=trans(symm(_ih_),ty21),
               match$0=fmtty_rel_det(ty),
               f4=match$0[4],
               f2=match$0[2];
              caml_call1(f2,0);
              caml_call1(f4,0);
              return [9,_ii_,ty22,trans(_ig_,rest2$8)];
             case 10:var switch$0=0,switch$10=0;break;
             case 11:var switch$0=1,switch$10=0;break;
             case 12:var switch$0=2,switch$10=0;break;
             case 13:var switch$0=3,switch$10=0;break;
             case 14:var switch$0=4,switch$10=0;break;
             default:var switch$10=1}
          if(switch$10)throw [0,Assert_failure,_ad_];
          break;
         case 10:
          var _ij_=ty1[1];
          if(typeof match !== "number" && 10 === match[0])
           {var rest2$9=match[1];return [10,trans(_ij_,rest2$9)]}
          throw [0,Assert_failure,_ae_];
         case 11:
          var _ik_=ty1[1];
          if(typeof match === "number")
           var switch$11=1;
          else
           switch(match[0])
            {case 10:var switch$0=0,switch$11=0;break;
             case 11:var rest2$10=match[1];return [11,trans(_ik_,rest2$10)];
             default:var switch$11=1}
          if(switch$11)throw [0,Assert_failure,_af_];
          break;
         case 12:
          var _il_=ty1[1];
          if(typeof match === "number")
           var switch$12=1;
          else
           switch(match[0])
            {case 10:var switch$0=0,switch$12=0;break;
             case 11:var switch$0=1,switch$12=0;break;
             case 12:var rest2$11=match[1];return [12,trans(_il_,rest2$11)];
             default:var switch$12=1}
          if(switch$12)throw [0,Assert_failure,_ag_];
          break;
         case 13:
          var _im_=ty1[1];
          if(typeof match === "number")
           var switch$13=1;
          else
           switch(match[0])
            {case 10:var switch$0=0,switch$13=0;break;
             case 11:var switch$0=1,switch$13=0;break;
             case 12:var switch$0=2,switch$13=0;break;
             case 13:var rest2$12=match[1];return [13,trans(_im_,rest2$12)];
             default:var switch$13=1}
          if(switch$13)throw [0,Assert_failure,_ah_];
          break;
         default:
          var _in_=ty1[1];
          if(typeof match === "number")
           var switch$14=1;
          else
           switch(match[0])
            {case 10:var switch$0=0,switch$14=0;break;
             case 11:var switch$0=1,switch$14=0;break;
             case 12:var switch$0=2,switch$14=0;break;
             case 13:var switch$0=3,switch$14=0;break;
             case 14:var rest2$13=match[1];return [14,trans(_in_,rest2$13)];
             default:var switch$14=1}
          if(switch$14)throw [0,Assert_failure,_ai_]}
      switch(switch$0)
       {case 0:throw [0,Assert_failure,_Y_];
        case 1:throw [0,Assert_failure,_Z_];
        case 2:throw [0,Assert_failure,___];
        case 3:throw [0,Assert_failure,_$_];
        case 4:throw [0,Assert_failure,_aa_];
        case 5:throw [0,Assert_failure,_W_];
        case 6:throw [0,Assert_failure,_X_];
        default:throw [0,Assert_failure,_ab_]}}
    var Type_mismatch=[248,_aj_,caml_fresh_oo_id(0)];
    function type_padding(pad,match)
     {if(typeof pad === "number")
       return [0,0,match];
      else
       {if(0 === pad[0])
         {var w=pad[2],padty=pad[1];return [0,[0,padty,w],match]}
        if(typeof match !== "number" && 2 === match[0])
         {var rest=match[1],padty$0=pad[1];return [0,[1,padty$0],rest]}
        throw Type_mismatch}}
    function type_padprec(pad,prec,fmtty)
     {var match=type_padding(pad,fmtty);
      if(typeof prec === "number")
       {if(0 === prec)
         {var rest=match[2],pad$0=match[1];return [0,pad$0,0,rest]}
        var _h6_=match[2];
        if(typeof _h6_ !== "number" && 2 === _h6_[0])
         {var rest$0=_h6_[1],pad$1=match[1];return [0,pad$1,1,rest$0]}
        throw Type_mismatch}
      var rest$1=match[2],pad$2=match[1],p=prec[1];
      return [0,pad$2,[0,p],rest$1]}
    function type_ignored_param_one(ign,fmt,fmtty)
     {var match=type_format_gen(fmt,fmtty),fmtty$0=match[2],fmt$0=match[1];
      return [0,[23,ign,fmt$0],fmtty$0]}
    function type_format_gen(fmt,fmtty)
     {if(typeof fmt === "number")
       return [0,0,fmtty];
      else
       switch(fmt[0])
        {case 0:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           {var
             fmtty_rest=fmtty[1],
             fmt_rest=fmt[1],
             match=type_format_gen(fmt_rest,fmtty_rest),
             fmtty$0=match[2],
             fmt$0=match[1];
            return [0,[0,fmt$0],fmtty$0]}
          break;
         case 1:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           {var
             fmtty_rest$0=fmtty[1],
             fmt_rest$0=fmt[1],
             match$0=type_format_gen(fmt_rest$0,fmtty_rest$0),
             fmtty$1=match$0[2],
             fmt$1=match$0[1];
            return [0,[1,fmt$1],fmtty$1]}
          break;
         case 2:
          var
           fmt_rest$1=fmt[2],
           pad=fmt[1],
           _hE_=type_padding(pad,fmtty),
           _hF_=_hE_[2],
           _hG_=_hE_[1];
          if(typeof _hF_ !== "number" && 1 === _hF_[0])
           {var
             fmtty_rest$1=_hF_[1],
             match$1=type_format_gen(fmt_rest$1,fmtty_rest$1),
             fmtty$2=match$1[2],
             fmt$2=match$1[1];
            return [0,[2,_hG_,fmt$2],fmtty$2]}
          throw Type_mismatch;
         case 3:
          var
           fmt_rest$2=fmt[2],
           pad$0=fmt[1],
           _hH_=type_padding(pad$0,fmtty),
           _hI_=_hH_[2],
           _hJ_=_hH_[1];
          if(typeof _hI_ !== "number" && 1 === _hI_[0])
           {var
             fmtty_rest$2=_hI_[1],
             match$2=type_format_gen(fmt_rest$2,fmtty_rest$2),
             fmtty$3=match$2[2],
             fmt$3=match$2[1];
            return [0,[3,_hJ_,fmt$3],fmtty$3]}
          throw Type_mismatch;
         case 4:
          var
           fmt_rest$3=fmt[4],
           prec=fmt[3],
           pad$1=fmt[2],
           iconv=fmt[1],
           _hK_=type_padprec(pad$1,prec,fmtty),
           _hL_=_hK_[3],
           _hM_=_hK_[2],
           _hN_=_hK_[1];
          if(typeof _hL_ !== "number" && 2 === _hL_[0])
           {var
             fmtty_rest$3=_hL_[1],
             match$3=type_format_gen(fmt_rest$3,fmtty_rest$3),
             fmtty$4=match$3[2],
             fmt$4=match$3[1];
            return [0,[4,iconv,_hN_,_hM_,fmt$4],fmtty$4]}
          throw Type_mismatch;
         case 5:
          var
           fmt_rest$4=fmt[4],
           prec$0=fmt[3],
           pad$2=fmt[2],
           iconv$0=fmt[1],
           _hO_=type_padprec(pad$2,prec$0,fmtty),
           _hP_=_hO_[3],
           _hQ_=_hO_[2],
           _hR_=_hO_[1];
          if(typeof _hP_ !== "number" && 3 === _hP_[0])
           {var
             fmtty_rest$4=_hP_[1],
             match$4=type_format_gen(fmt_rest$4,fmtty_rest$4),
             fmtty$5=match$4[2],
             fmt$5=match$4[1];
            return [0,[5,iconv$0,_hR_,_hQ_,fmt$5],fmtty$5]}
          throw Type_mismatch;
         case 6:
          var
           fmt_rest$5=fmt[4],
           prec$1=fmt[3],
           pad$3=fmt[2],
           iconv$1=fmt[1],
           _hS_=type_padprec(pad$3,prec$1,fmtty),
           _hT_=_hS_[3],
           _hU_=_hS_[2],
           _hV_=_hS_[1];
          if(typeof _hT_ !== "number" && 4 === _hT_[0])
           {var
             fmtty_rest$5=_hT_[1],
             match$5=type_format_gen(fmt_rest$5,fmtty_rest$5),
             fmtty$6=match$5[2],
             fmt$6=match$5[1];
            return [0,[6,iconv$1,_hV_,_hU_,fmt$6],fmtty$6]}
          throw Type_mismatch;
         case 7:
          var
           fmt_rest$6=fmt[4],
           prec$2=fmt[3],
           pad$4=fmt[2],
           iconv$2=fmt[1],
           _hW_=type_padprec(pad$4,prec$2,fmtty),
           _hX_=_hW_[3],
           _hY_=_hW_[2],
           _hZ_=_hW_[1];
          if(typeof _hX_ !== "number" && 5 === _hX_[0])
           {var
             fmtty_rest$6=_hX_[1],
             match$6=type_format_gen(fmt_rest$6,fmtty_rest$6),
             fmtty$7=match$6[2],
             fmt$7=match$6[1];
            return [0,[7,iconv$2,_hZ_,_hY_,fmt$7],fmtty$7]}
          throw Type_mismatch;
         case 8:
          var
           fmt_rest$7=fmt[4],
           prec$3=fmt[3],
           pad$5=fmt[2],
           fconv=fmt[1],
           _h0_=type_padprec(pad$5,prec$3,fmtty),
           _h1_=_h0_[3],
           _h2_=_h0_[2],
           _h3_=_h0_[1];
          if(typeof _h1_ !== "number" && 6 === _h1_[0])
           {var
             fmtty_rest$7=_h1_[1],
             match$7=type_format_gen(fmt_rest$7,fmtty_rest$7),
             fmtty$8=match$7[2],
             fmt$8=match$7[1];
            return [0,[8,fconv,_h3_,_h2_,fmt$8],fmtty$8]}
          throw Type_mismatch;
         case 9:
          if(typeof fmtty !== "number" && 7 === fmtty[0])
           {var
             fmtty_rest$8=fmtty[1],
             fmt_rest$8=fmt[1],
             match$8=type_format_gen(fmt_rest$8,fmtty_rest$8),
             fmtty$9=match$8[2],
             fmt$9=match$8[1];
            return [0,[9,fmt$9],fmtty$9]}
          break;
         case 10:
          var
           fmt_rest$9=fmt[1],
           match$9=type_format_gen(fmt_rest$9,fmtty),
           fmtty$10=match$9[2],
           fmt$10=match$9[1];
          return [0,[10,fmt$10],fmtty$10];
         case 11:
          var
           fmt_rest$10=fmt[2],
           str=fmt[1],
           match$10=type_format_gen(fmt_rest$10,fmtty),
           fmtty$11=match$10[2],
           fmt$11=match$10[1];
          return [0,[11,str,fmt$11],fmtty$11];
         case 12:
          var
           fmt_rest$11=fmt[2],
           chr=fmt[1],
           match$11=type_format_gen(fmt_rest$11,fmtty),
           fmtty$12=match$11[2],
           fmt$12=match$11[1];
          return [0,[12,chr,fmt$12],fmtty$12];
         case 13:
          if(typeof fmtty !== "number" && 8 === fmtty[0])
           {var
             fmtty_rest$9=fmtty[2],
             sub_fmtty=fmtty[1],
             fmt_rest$12=fmt[3],
             sub_fmtty$0=fmt[2],
             pad_opt=fmt[1];
            if(caml_notequal([0,sub_fmtty$0],[0,sub_fmtty]))
             throw Type_mismatch;
            var
             match$12=type_format_gen(fmt_rest$12,fmtty_rest$9),
             fmtty$13=match$12[2],
             fmt$13=match$12[1];
            return [0,[13,pad_opt,sub_fmtty,fmt$13],fmtty$13]}
          break;
         case 14:
          if(typeof fmtty !== "number" && 9 === fmtty[0])
           {var
             fmtty_rest$10=fmtty[3],
             sub_fmtty1=fmtty[1],
             fmt_rest$13=fmt[3],
             sub_fmtty$1=fmt[2],
             pad_opt$0=fmt[1],
             _h4_=[0,erase_rel(sub_fmtty1)];
            if(caml_notequal([0,erase_rel(sub_fmtty$1)],_h4_))
             throw Type_mismatch;
            var
             match$13=type_format_gen(fmt_rest$13,erase_rel(fmtty_rest$10)),
             fmtty$14=match$13[2],
             fmt$14=match$13[1];
            return [0,[14,pad_opt$0,sub_fmtty1,fmt$14],fmtty$14]}
          break;
         case 15:
          if(typeof fmtty !== "number" && 10 === fmtty[0])
           {var
             fmtty_rest$11=fmtty[1],
             fmt_rest$14=fmt[1],
             match$14=type_format_gen(fmt_rest$14,fmtty_rest$11),
             fmtty$15=match$14[2],
             fmt$15=match$14[1];
            return [0,[15,fmt$15],fmtty$15]}
          break;
         case 16:
          if(typeof fmtty !== "number" && 11 === fmtty[0])
           {var
             fmtty_rest$12=fmtty[1],
             fmt_rest$15=fmt[1],
             match$15=type_format_gen(fmt_rest$15,fmtty_rest$12),
             fmtty$16=match$15[2],
             fmt$16=match$15[1];
            return [0,[16,fmt$16],fmtty$16]}
          break;
         case 17:
          var
           fmt_rest$16=fmt[2],
           formatting_lit=fmt[1],
           match$16=type_format_gen(fmt_rest$16,fmtty),
           fmtty$17=match$16[2],
           fmt$17=match$16[1];
          return [0,[17,formatting_lit,fmt$17],fmtty$17];
         case 18:
          var fmt_rest$17=fmt[2],formatting_gen=fmt[1];
          if(0 === formatting_gen[0])
           {var
             match$20=formatting_gen[1],
             str$0=match$20[2],
             fmt1=match$20[1],
             match$21=type_format_gen(fmt1,fmtty),
             fmtty2=match$21[2],
             fmt2=match$21[1],
             match$22=type_format_gen(fmt_rest$17,fmtty2),
             fmtty3=match$22[2],
             fmt3=match$22[1];
            return [0,[18,[0,[0,fmt2,str$0]],fmt3],fmtty3]}
          var
           match$23=formatting_gen[1],
           str$1=match$23[2],
           fmt1$0=match$23[1],
           match$24=type_format_gen(fmt1$0,fmtty),
           fmtty2$0=match$24[2],
           fmt2$0=match$24[1],
           match$25=type_format_gen(fmt_rest$17,fmtty2$0),
           fmtty3$0=match$25[2],
           fmt3$0=match$25[1];
          return [0,[18,[1,[0,fmt2$0,str$1]],fmt3$0],fmtty3$0];
         case 19:
          if(typeof fmtty !== "number" && 13 === fmtty[0])
           {var
             fmtty_rest$13=fmtty[1],
             fmt_rest$18=fmt[1],
             match$17=type_format_gen(fmt_rest$18,fmtty_rest$13),
             fmtty$18=match$17[2],
             fmt$18=match$17[1];
            return [0,[19,fmt$18],fmtty$18]}
          break;
         case 20:
          if(typeof fmtty !== "number" && 1 === fmtty[0])
           {var
             fmtty_rest$14=fmtty[1],
             fmt_rest$19=fmt[3],
             char_set=fmt[2],
             width_opt=fmt[1],
             match$18=type_format_gen(fmt_rest$19,fmtty_rest$14),
             fmtty$19=match$18[2],
             fmt$19=match$18[1];
            return [0,[20,width_opt,char_set,fmt$19],fmtty$19]}
          break;
         case 21:
          if(typeof fmtty !== "number" && 2 === fmtty[0])
           {var
             fmtty_rest$15=fmtty[1],
             fmt_rest$20=fmt[2],
             counter=fmt[1],
             match$19=type_format_gen(fmt_rest$20,fmtty_rest$15),
             fmtty$20=match$19[2],
             fmt$20=match$19[1];
            return [0,[21,counter,fmt$20],fmtty$20]}
          break;
         case 23:
          var rest=fmt[2],ign=fmt[1];
          if(typeof ign === "number")
           switch(ign)
            {case 0:return type_ignored_param_one(ign,rest,fmtty);
             case 1:return type_ignored_param_one(ign,rest,fmtty);
             case 2:return type_ignored_param_one(ign,rest,fmtty);
             case 3:
              if(typeof fmtty !== "number" && 14 === fmtty[0])
               {var
                 fmtty_rest$16=fmtty[1],
                 match$26=type_format_gen(rest,fmtty_rest$16),
                 fmtty$21=match$26[2],
                 fmt$21=match$26[1];
                return [0,[23,3,fmt$21],fmtty$21]}
              throw Type_mismatch;
             default:return type_ignored_param_one(ign,rest,fmtty)}
          else
           switch(ign[0])
            {case 0:return type_ignored_param_one(ign,rest,fmtty);
             case 1:return type_ignored_param_one(ign,rest,fmtty);
             case 2:return type_ignored_param_one(ign,rest,fmtty);
             case 3:return type_ignored_param_one(ign,rest,fmtty);
             case 4:return type_ignored_param_one(ign,rest,fmtty);
             case 5:return type_ignored_param_one(ign,rest,fmtty);
             case 6:return type_ignored_param_one(ign,rest,fmtty);
             case 7:
              var sub_fmtty$2=ign[2],pad_opt$1=ign[1];
              return type_ignored_param_one
                      ([7,pad_opt$1,sub_fmtty$2],rest,fmtty);
             case 8:
              var
               sub_fmtty$3=ign[2],
               pad_opt$2=ign[1],
               _h5_=type_ignored_format_substitution(sub_fmtty$3,rest,fmtty),
               match$27=_h5_[2],
               fmtty$22=match$27[2],
               fmt$22=match$27[1],
               sub_fmtty$4=_h5_[1];
              return [0,[23,[8,pad_opt$2,sub_fmtty$4],fmt$22],fmtty$22];
             case 9:return type_ignored_param_one(ign,rest,fmtty);
             default:return type_ignored_param_one(ign,rest,fmtty)}
         }
      throw Type_mismatch}
    function type_ignored_format_substitution(sub_fmtty,fmt,match)
     {if(typeof sub_fmtty === "number")
       return [0,0,type_format_gen(fmt,match)];
      else
       switch(sub_fmtty[0])
        {case 0:
          if(typeof match !== "number" && 0 === match[0])
           {var
             fmtty_rest=match[1],
             sub_fmtty_rest=sub_fmtty[1],
             match$0=
              type_ignored_format_substitution(sub_fmtty_rest,fmt,fmtty_rest),
             fmt$0=match$0[2],
             sub_fmtty_rest$0=match$0[1];
            return [0,[0,sub_fmtty_rest$0],fmt$0]}
          break;
         case 1:
          if(typeof match !== "number" && 1 === match[0])
           {var
             fmtty_rest$0=match[1],
             sub_fmtty_rest$1=sub_fmtty[1],
             match$1=
              type_ignored_format_substitution
               (sub_fmtty_rest$1,fmt,fmtty_rest$0),
             fmt$1=match$1[2],
             sub_fmtty_rest$2=match$1[1];
            return [0,[1,sub_fmtty_rest$2],fmt$1]}
          break;
         case 2:
          if(typeof match !== "number" && 2 === match[0])
           {var
             fmtty_rest$1=match[1],
             sub_fmtty_rest$3=sub_fmtty[1],
             match$2=
              type_ignored_format_substitution
               (sub_fmtty_rest$3,fmt,fmtty_rest$1),
             fmt$2=match$2[2],
             sub_fmtty_rest$4=match$2[1];
            return [0,[2,sub_fmtty_rest$4],fmt$2]}
          break;
         case 3:
          if(typeof match !== "number" && 3 === match[0])
           {var
             fmtty_rest$2=match[1],
             sub_fmtty_rest$5=sub_fmtty[1],
             match$3=
              type_ignored_format_substitution
               (sub_fmtty_rest$5,fmt,fmtty_rest$2),
             fmt$3=match$3[2],
             sub_fmtty_rest$6=match$3[1];
            return [0,[3,sub_fmtty_rest$6],fmt$3]}
          break;
         case 4:
          if(typeof match !== "number" && 4 === match[0])
           {var
             fmtty_rest$3=match[1],
             sub_fmtty_rest$7=sub_fmtty[1],
             match$4=
              type_ignored_format_substitution
               (sub_fmtty_rest$7,fmt,fmtty_rest$3),
             fmt$4=match$4[2],
             sub_fmtty_rest$8=match$4[1];
            return [0,[4,sub_fmtty_rest$8],fmt$4]}
          break;
         case 5:
          if(typeof match !== "number" && 5 === match[0])
           {var
             fmtty_rest$4=match[1],
             sub_fmtty_rest$9=sub_fmtty[1],
             match$5=
              type_ignored_format_substitution
               (sub_fmtty_rest$9,fmt,fmtty_rest$4),
             fmt$5=match$5[2],
             sub_fmtty_rest$10=match$5[1];
            return [0,[5,sub_fmtty_rest$10],fmt$5]}
          break;
         case 6:
          if(typeof match !== "number" && 6 === match[0])
           {var
             fmtty_rest$5=match[1],
             sub_fmtty_rest$11=sub_fmtty[1],
             match$6=
              type_ignored_format_substitution
               (sub_fmtty_rest$11,fmt,fmtty_rest$5),
             fmt$6=match$6[2],
             sub_fmtty_rest$12=match$6[1];
            return [0,[6,sub_fmtty_rest$12],fmt$6]}
          break;
         case 7:
          if(typeof match !== "number" && 7 === match[0])
           {var
             fmtty_rest$6=match[1],
             sub_fmtty_rest$13=sub_fmtty[1],
             match$7=
              type_ignored_format_substitution
               (sub_fmtty_rest$13,fmt,fmtty_rest$6),
             fmt$7=match$7[2],
             sub_fmtty_rest$14=match$7[1];
            return [0,[7,sub_fmtty_rest$14],fmt$7]}
          break;
         case 8:
          if(typeof match !== "number" && 8 === match[0])
           {var
             fmtty_rest$7=match[2],
             sub2_fmtty=match[1],
             sub_fmtty_rest$15=sub_fmtty[2],
             sub2_fmtty$0=sub_fmtty[1];
            if(caml_notequal([0,sub2_fmtty$0],[0,sub2_fmtty]))
             throw Type_mismatch;
            var
             match$8=
              type_ignored_format_substitution
               (sub_fmtty_rest$15,fmt,fmtty_rest$7),
             fmt$8=match$8[2],
             sub_fmtty_rest$16=match$8[1];
            return [0,[8,sub2_fmtty,sub_fmtty_rest$16],fmt$8]}
          break;
         case 9:
          if(typeof match !== "number" && 9 === match[0])
           {var
             fmtty_rest$8=match[3],
             sub2_fmtty$1=match[2],
             sub1_fmtty=match[1],
             sub_fmtty_rest$17=sub_fmtty[3],
             sub2_fmtty$2=sub_fmtty[2],
             sub1_fmtty$0=sub_fmtty[1],
             _hC_=[0,erase_rel(sub1_fmtty)];
            if(caml_notequal([0,erase_rel(sub1_fmtty$0)],_hC_))
             throw Type_mismatch;
            var _hD_=[0,erase_rel(sub2_fmtty$1)];
            if(caml_notequal([0,erase_rel(sub2_fmtty$2)],_hD_))
             throw Type_mismatch;
            var
             sub_fmtty$0=trans(symm(sub1_fmtty),sub2_fmtty$1),
             match$9=fmtty_rel_det(sub_fmtty$0),
             f4=match$9[4],
             f2=match$9[2];
            caml_call1(f2,0);
            caml_call1(f4,0);
            var
             match$10=
              type_ignored_format_substitution
               (erase_rel(sub_fmtty_rest$17),fmt,fmtty_rest$8),
             fmt$9=match$10[2],
             sub_fmtty_rest$18=match$10[1];
            return [0,
                    [9,sub1_fmtty,sub2_fmtty$1,symm(sub_fmtty_rest$18)],
                    fmt$9]}
          break;
         case 10:
          if(typeof match !== "number" && 10 === match[0])
           {var
             fmtty_rest$9=match[1],
             sub_fmtty_rest$19=sub_fmtty[1],
             match$11=
              type_ignored_format_substitution
               (sub_fmtty_rest$19,fmt,fmtty_rest$9),
             fmt$10=match$11[2],
             sub_fmtty_rest$20=match$11[1];
            return [0,[10,sub_fmtty_rest$20],fmt$10]}
          break;
         case 11:
          if(typeof match !== "number" && 11 === match[0])
           {var
             fmtty_rest$10=match[1],
             sub_fmtty_rest$21=sub_fmtty[1],
             match$12=
              type_ignored_format_substitution
               (sub_fmtty_rest$21,fmt,fmtty_rest$10),
             fmt$11=match$12[2],
             sub_fmtty_rest$22=match$12[1];
            return [0,[11,sub_fmtty_rest$22],fmt$11]}
          break;
         case 13:
          if(typeof match !== "number" && 13 === match[0])
           {var
             fmtty_rest$11=match[1],
             sub_fmtty_rest$23=sub_fmtty[1],
             match$13=
              type_ignored_format_substitution
               (sub_fmtty_rest$23,fmt,fmtty_rest$11),
             fmt$12=match$13[2],
             sub_fmtty_rest$24=match$13[1];
            return [0,[13,sub_fmtty_rest$24],fmt$12]}
          break;
         case 14:
          if(typeof match !== "number" && 14 === match[0])
           {var
             fmtty_rest$12=match[1],
             sub_fmtty_rest$25=sub_fmtty[1],
             match$14=
              type_ignored_format_substitution
               (sub_fmtty_rest$25,fmt,fmtty_rest$12),
             fmt$13=match$14[2],
             sub_fmtty_rest$26=match$14[1];
            return [0,[14,sub_fmtty_rest$26],fmt$13]}
          break
         }
      throw Type_mismatch}
    function fix_padding(padty,width,str)
     {var
       len=caml_ml_string_length(str),
       padty$0=0 <= width?padty:0,
       width$0=abs(width);
      if(width$0 <= len)return str;
      var _hB_=2 === padty$0?48:32,res=make(width$0,_hB_);
      switch(padty$0)
       {case 0:blit$0(str,0,res,0,len);break;
        case 1:blit$0(str,0,res,width$0 - len | 0,len);break;
        default:
         if(0 < len)
          {if(43 === caml_string_get(str,0))
            var switch$1=1;
           else
            if(45 === caml_string_get(str,0))
             var switch$1=1;
            else
             if(32 === caml_string_get(str,0))
              var switch$1=1;
             else
              var switch$0=0,switch$1=0;
           if(switch$1)
            {caml_bytes_set(res,0,caml_string_get(str,0));
             blit$0(str,1,res,(width$0 - len | 0) + 1 | 0,len - 1 | 0);
             var switch$0=1}}
         else
          var switch$0=0;
         if(!switch$0)
          {if(1 < len)
            if(48 === caml_string_get(str,0))
             {if(120 === caml_string_get(str,1))
               var switch$3=1;
              else
               if(88 === caml_string_get(str,1))
                var switch$3=1;
               else
                var switch$2=0,switch$3=0;
              if(switch$3)
               {caml_bytes_set(res,1,caml_string_get(str,1));
                blit$0(str,2,res,(width$0 - len | 0) + 2 | 0,len - 2 | 0);
                var switch$2=1}}
            else
             var switch$2=0;
           else
            var switch$2=0;
           if(!switch$2)blit$0(str,0,res,width$0 - len | 0,len)}}
      return res}
    function fix_int_precision(prec,str)
     {var
       prec$0=abs(prec),
       len=caml_ml_string_length(str),
       c=caml_string_get(str,0);
      if(58 <= c)
       var switch$0=71 <= c?5 < (c - 97 | 0) >>> 0?1:0:65 <= c?0:1;
      else
       {if(32 === c)
         var switch$1=1;
        else
         if(43 <= c)
          {var switcher=c - 43 | 0;
           switch(switcher)
            {case 5:
              if(len < (prec$0 + 2 | 0))
               if(1 < len)
                {var
                  switch$2=
                   120 === caml_string_get(str,1)
                    ?0
                    :88 === caml_string_get(str,1)?0:1;
                 if(!switch$2)
                  {var res$1=make(prec$0 + 2 | 0,48);
                   caml_bytes_set(res$1,1,caml_string_get(str,1));
                   blit$0(str,2,res$1,(prec$0 - len | 0) + 4 | 0,len - 2 | 0);
                   return res$1}}
              var switch$0=0,switch$1=0;
              break;
             case 0:
             case 2:var switch$1=1;break;
             case 1:
             case 3:
             case 4:var switch$0=1,switch$1=0;break;
             default:var switch$0=0,switch$1=0}}
         else
          var switch$0=1,switch$1=0;
        if(switch$1)
         {if(len < (prec$0 + 1 | 0))
           {var res$0=make(prec$0 + 1 | 0,48);
            caml_bytes_set(res$0,0,c);
            blit$0(str,1,res$0,(prec$0 - len | 0) + 2 | 0,len - 1 | 0);
            return res$0}
          var switch$0=1}}
      if(!switch$0)
       if(len < prec$0)
        {var res=make(prec$0,48);
         blit$0(str,0,res,prec$0 - len | 0,len);
         return res}
      return str}
    function string_to_caml_string(str)
     {var i$1=0;
      for(;;)
       {if(caml_ml_string_length(str) <= i$1)
         var _hA_=0;
        else
         {var match$0=caml_string_unsafe_get(str,i$1);
          if(32 <= match$0)
           {var _hz_=match$0 - 34 | 0;
            if(58 < _hz_ >>> 0)
             if(93 <= _hz_)var switch$0=0,switch$1=0;else var switch$1=1;
            else
             if(56 < (_hz_ - 1 | 0) >>> 0)
              var switch$0=1,switch$1=0;
             else
              var switch$1=1;
            if(switch$1){var i$2=i$1 + 1 | 0,i$1=i$2;continue}}
          else
           var switch$0=11 <= match$0?13 === match$0?1:0:8 <= match$0?1:0;
          var _hA_=switch$0?1:1}
        if(_hA_)
         {var n=[0,0],_hs_=caml_ml_bytes_length(str) - 1 | 0,_hr_=0;
          if(!(_hs_ < 0))
           {var i$0=_hr_;
            for(;;)
             {var match=caml_string_unsafe_get(str,i$0);
              if(32 <= match)
               {var _hw_=match - 34 | 0;
                if(58 < _hw_ >>> 0)
                 if(93 <= _hw_)var switch$2=0,switch$3=0;else var switch$3=1;
                else
                 if(56 < (_hw_ - 1 | 0) >>> 0)
                  var switch$2=1,switch$3=0;
                 else
                  var switch$3=1;
                if(switch$3)var _hx_=1,switch$2=2}
              else
               var switch$2=11 <= match?13 === match?1:0:8 <= match?1:0;
              switch(switch$2)
               {case 0:var _hx_=4;break;case 1:var _hx_=2;break}
              n[1] = n[1] + _hx_ | 0;
              var _hy_=i$0 + 1 | 0;
              if(_hs_ !== i$0){var i$0=_hy_;continue}
              break}}
          if(n[1] === caml_ml_bytes_length(str))
           var str$0=copy(str);
          else
           {var s=caml_create_bytes(n[1]);
            n[1] = 0;
            var _hu_=caml_ml_bytes_length(str) - 1 | 0,_ht_=0;
            if(!(_hu_ < 0))
             {var i=_ht_;
              for(;;)
               {var c=caml_string_unsafe_get(str,i);
                if(35 <= c)
                 var switch$4=92 === c?1:127 <= c?0:2;
                else
                 if(32 <= c)
                  var switch$4=34 <= c?1:2;
                 else
                  if(14 <= c)
                   var switch$4=0;
                  else
                   switch(c)
                    {case 8:
                      caml_string_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_string_unsafe_set(s,n[1],98);
                      var switch$4=3;
                      break;
                     case 9:
                      caml_string_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_string_unsafe_set(s,n[1],116);
                      var switch$4=3;
                      break;
                     case 10:
                      caml_string_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_string_unsafe_set(s,n[1],110);
                      var switch$4=3;
                      break;
                     case 13:
                      caml_string_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_string_unsafe_set(s,n[1],114);
                      var switch$4=3;
                      break;
                     default:var switch$4=0}
                switch(switch$4)
                 {case 0:
                   caml_string_unsafe_set(s,n[1],92);
                   n[1]++;
                   caml_string_unsafe_set(s,n[1],48 + (c / 100 | 0) | 0);
                   n[1]++;
                   caml_string_unsafe_set
                    (s,n[1],48 + ((c / 10 | 0) % 10 | 0) | 0);
                   n[1]++;
                   caml_string_unsafe_set(s,n[1],48 + (c % 10 | 0) | 0);
                   break;
                  case 1:
                   caml_string_unsafe_set(s,n[1],92);
                   n[1]++;
                   caml_string_unsafe_set(s,n[1],c);
                   break;
                  case 2:caml_string_unsafe_set(s,n[1],c);break
                  }
                n[1]++;
                var _hv_=i + 1 | 0;
                if(_hu_ !== i){var i=_hv_;continue}
                break}}
            var str$0=s}}
        else
         var str$0=str;
        var l=caml_ml_string_length(str$0),res=make(l + 2 | 0,34);
        caml_blit_string(str$0,0,res,1,l);
        return res}}
    function convert_int(iconv,n)
     {switch(iconv)
       {case 0:var _hq_=_ak_;break;
        case 1:var _hq_=_al_;break;
        case 2:var _hq_=_am_;break;
        case 3:var _hq_=_an_;break;
        case 4:var _hq_=_ao_;break;
        case 5:var _hq_=_ap_;break;
        case 6:var _hq_=_aq_;break;
        case 7:var _hq_=_ar_;break;
        case 8:var _hq_=_as_;break;
        case 9:var _hq_=_at_;break;
        case 10:var _hq_=_au_;break;
        case 11:var _hq_=_av_;break;
        default:var _hq_=_aw_}
      return caml_format_int(_hq_,n)}
    function convert_int32(iconv,n)
     {switch(iconv)
       {case 0:var _hp_=_aK_;break;
        case 1:var _hp_=_aL_;break;
        case 2:var _hp_=_aM_;break;
        case 3:var _hp_=_aN_;break;
        case 4:var _hp_=_aO_;break;
        case 5:var _hp_=_aP_;break;
        case 6:var _hp_=_aQ_;break;
        case 7:var _hp_=_aR_;break;
        case 8:var _hp_=_aS_;break;
        case 9:var _hp_=_aT_;break;
        case 10:var _hp_=_aU_;break;
        case 11:var _hp_=_aV_;break;
        default:var _hp_=_aW_}
      return caml_format_int(_hp_,n)}
    function convert_nativeint(iconv,n)
     {switch(iconv)
       {case 0:var _ho_=_aX_;break;
        case 1:var _ho_=_aY_;break;
        case 2:var _ho_=_aZ_;break;
        case 3:var _ho_=_a0_;break;
        case 4:var _ho_=_a1_;break;
        case 5:var _ho_=_a2_;break;
        case 6:var _ho_=_a3_;break;
        case 7:var _ho_=_a4_;break;
        case 8:var _ho_=_a5_;break;
        case 9:var _ho_=_a6_;break;
        case 10:var _ho_=_a7_;break;
        case 11:var _ho_=_a8_;break;
        default:var _ho_=_a9_}
      return caml_format_int(_ho_,n)}
    function convert_int64(iconv,n)
     {switch(iconv)
       {case 0:var _hn_=_ax_;break;
        case 1:var _hn_=_ay_;break;
        case 2:var _hn_=_az_;break;
        case 3:var _hn_=_aA_;break;
        case 4:var _hn_=_aB_;break;
        case 5:var _hn_=_aC_;break;
        case 6:var _hn_=_aD_;break;
        case 7:var _hn_=_aE_;break;
        case 8:var _hn_=_aF_;break;
        case 9:var _hn_=_aG_;break;
        case 10:var _hn_=_aH_;break;
        case 11:var _hn_=_aI_;break;
        default:var _hn_=_aJ_}
      return caml_int64_format(_hn_,n)}
    function convert_float(fconv,prec$0,x)
     {if(16 <= fconv)
       {if(17 <= fconv)
         switch(fconv - 17 | 0)
          {case 2:var switch$0=0;break;
           case 0:
           case 3:var sign=43,switch$0=1;break;
           default:var sign=32,switch$0=1}
        else
         var switch$0=0;
        if(!switch$0)var sign=45;
        var s=caml_hexstring_of_float(x,prec$0,sign);
        return 19 <= fconv?map$0(uppercase_ascii,s):s}
      if(15 === fconv)
       var _hk_=_a__;
      else
       {var prec=abs(prec$0);
        switch(fconv)
         {case 15:var symb=70;break;
          case 0:
          case 1:
          case 2:var symb=102;break;
          case 3:
          case 4:
          case 5:var symb=101;break;
          case 6:
          case 7:
          case 8:var symb=69;break;
          case 9:
          case 10:
          case 11:var symb=103;break;
          case 12:
          case 13:
          case 14:var symb=71;break;
          case 16:
          case 17:
          case 18:var symb=104;break;
          default:var symb=72}
        var buf=buffer_create(16);
        buffer_add_char(buf,37);
        switch(fconv)
         {case 1:
          case 4:
          case 7:
          case 10:
          case 13:
          case 17:
          case 20:buffer_add_char(buf,43);break;
          case 2:
          case 5:
          case 8:
          case 11:
          case 14:
          case 18:
          case 21:buffer_add_char(buf,32);break
          }
        buffer_add_char(buf,46);
        buffer_add_string(buf,caml_new_string("" + prec));
        buffer_add_char(buf,symb);
        var _hk_=buffer_contents(buf)}
      var str=caml_format_float(_hk_,x);
      if(15 === fconv)
       {var len=caml_ml_string_length(str),match$0=caml_classify_float(x);
        if(3 === match$0)return x < 0?_a$_:_ba_;
        if(4 <= match$0)return _bb_;
        var i=0;
        for(;;)
         {if(i === len)
           var _hm_=0;
          else
           {var
             match=caml_string_get(str,i),
             _hl_=match - 46 | 0,
             switch$1=
              23 < _hl_ >>> 0?55 === _hl_?1:0:21 < (_hl_ - 1 | 0) >>> 0?1:0;
            if(!switch$1){var i$0=i + 1 | 0,i=i$0;continue}
            var _hm_=1}
          return _hm_?str:_b_(str,_bc_)}}
      return str}
    function make_int_padding_precision(k,o,acc,fmt,pad,match,trans,iconv)
     {if(typeof pad === "number")
       {if(typeof match === "number")
         return 0 === match
                 ?function(x)
                   {var str=caml_call2(trans,iconv,x);
                    return make_printf(k,o,[4,acc,str],fmt)}
                 :function(p,x)
                   {var str=fix_int_precision(p,caml_call2(trans,iconv,x));
                    return make_printf(k,o,[4,acc,str],fmt)};
        var p=match[1];
        return function(x)
         {var str=fix_int_precision(p,caml_call2(trans,iconv,x));
          return make_printf(k,o,[4,acc,str],fmt)}}
      else
       {if(0 === pad[0])
         {var _hh_=pad[2],_hi_=pad[1];
          if(typeof match === "number")
           return 0 === match
                   ?function(x)
                     {var str=fix_padding(_hi_,_hh_,caml_call2(trans,iconv,x));
                      return make_printf(k,o,[4,acc,str],fmt)}
                   :function(p,x)
                     {var
                       str=
                        fix_padding
                         (_hi_,_hh_,fix_int_precision(p,caml_call2(trans,iconv,x)));
                      return make_printf(k,o,[4,acc,str],fmt)};
          var p$0=match[1];
          return function(x)
           {var
             str=
              fix_padding
               (_hi_,_hh_,fix_int_precision(p$0,caml_call2(trans,iconv,x)));
            return make_printf(k,o,[4,acc,str],fmt)}}
        var _hj_=pad[1];
        if(typeof match === "number")
         return 0 === match
                 ?function(w,x)
                   {var str=fix_padding(_hj_,w,caml_call2(trans,iconv,x));
                    return make_printf(k,o,[4,acc,str],fmt)}
                 :function(w,p,x)
                   {var
                     str=
                      fix_padding
                       (_hj_,w,fix_int_precision(p,caml_call2(trans,iconv,x)));
                    return make_printf(k,o,[4,acc,str],fmt)};
        var p$1=match[1];
        return function(w,x)
         {var
           str=
            fix_padding
             (_hj_,w,fix_int_precision(p$1,caml_call2(trans,iconv,x)));
          return make_printf(k,o,[4,acc,str],fmt)}}}
    function make_string_padding(k,o,acc,fmt,pad,trans)
     {if(typeof pad === "number")
       return function(x)
        {var new_acc=[4,acc,caml_call1(trans,x)];
         return make_printf(k,o,new_acc,fmt)};
      else
       {if(0 === pad[0])
         {var width=pad[2],padty=pad[1];
          return function(x)
           {var new_acc=[4,acc,fix_padding(padty,width,caml_call1(trans,x))];
            return make_printf(k,o,new_acc,fmt)}}
        var padty$0=pad[1];
        return function(w,x)
         {var new_acc=[4,acc,fix_padding(padty$0,w,caml_call1(trans,x))];
          return make_printf(k,o,new_acc,fmt)}}}
    function make_printf$0(counter,k,o,acc,fmt)
     {var k$0=k,acc$0=acc,fmt$0=fmt;
      for(;;)
       if(typeof fmt$0 === "number")
        return caml_call2(k$0,o,acc$0);
       else
        switch(fmt$0[0])
         {case 0:
           var rest=fmt$0[1];
           return function(c)
            {var new_acc=[5,acc$0,c];return make_printf(k$0,o,new_acc,rest)};
          case 1:
           var rest$0=fmt$0[1];
           return function(c)
            {if(40 <= c)
              if(92 === c)
               var str=_j_,switch$0=2;
              else
               var switch$0=127 <= c?0:1;
             else
              if(32 <= c)
               if(39 <= c)var str=_k_,switch$0=2;else var switch$0=1;
              else
               if(14 <= c)
                var switch$0=0;
               else
                switch(c)
                 {case 8:var str=_l_,switch$0=2;break;
                  case 9:var str=_m_,switch$0=2;break;
                  case 10:var str=_n_,switch$0=2;break;
                  case 13:var str=_o_,switch$0=2;break;
                  default:var switch$0=0}
             switch(switch$0)
              {case 0:
                var s=caml_create_bytes(4);
                caml_string_unsafe_set(s,0,92);
                caml_string_unsafe_set(s,1,48 + (c / 100 | 0) | 0);
                caml_string_unsafe_set(s,2,48 + ((c / 10 | 0) % 10 | 0) | 0);
                caml_string_unsafe_set(s,3,48 + (c % 10 | 0) | 0);
                var str=s;
                break;
               case 1:
                var s$0=caml_create_bytes(1);
                caml_string_unsafe_set(s$0,0,c);
                var str=s$0;
                break
               }
             var l=caml_ml_string_length(str),res=make(l + 2 | 0,39);
             caml_blit_string(str,0,res,1,l);
             var new_acc=[4,acc$0,res];
             return make_printf(k$0,o,new_acc,rest$0)};
          case 2:
           var rest$1=fmt$0[2],pad=fmt$0[1];
           return make_string_padding
                   (k$0,o,acc$0,rest$1,pad,function(str){return str});
          case 3:
           var rest$2=fmt$0[2],pad$0=fmt$0[1];
           return make_string_padding
                   (k$0,o,acc$0,rest$2,pad$0,string_to_caml_string);
          case 4:
           var rest$3=fmt$0[4],prec=fmt$0[3],pad$1=fmt$0[2],iconv=fmt$0[1];
           return make_int_padding_precision
                   (k$0,o,acc$0,rest$3,pad$1,prec,convert_int,iconv);
          case 5:
           var
            rest$4=fmt$0[4],
            prec$0=fmt$0[3],
            pad$2=fmt$0[2],
            iconv$0=fmt$0[1];
           return make_int_padding_precision
                   (k$0,o,acc$0,rest$4,pad$2,prec$0,convert_int32,iconv$0);
          case 6:
           var
            rest$5=fmt$0[4],
            prec$1=fmt$0[3],
            pad$3=fmt$0[2],
            iconv$1=fmt$0[1];
           return make_int_padding_precision
                   (k$0,o,acc$0,rest$5,pad$3,prec$1,convert_nativeint,iconv$1);
          case 7:
           var
            rest$6=fmt$0[4],
            prec$2=fmt$0[3],
            pad$4=fmt$0[2],
            iconv$2=fmt$0[1];
           return make_int_padding_precision
                   (k$0,o,acc$0,rest$6,pad$4,prec$2,convert_int64,iconv$2);
          case 8:
           var rest$7=fmt$0[4],prec$3=fmt$0[3],pad$5=fmt$0[2],fconv=fmt$0[1];
           if(typeof pad$5 === "number")
            {if(typeof prec$3 === "number")
              return 0 === prec$3
                      ?function(x)
                        {var str=convert_float(fconv,default_float_precision,x);
                         return make_printf(k$0,o,[4,acc$0,str],rest$7)}
                      :function(p,x)
                        {var str=convert_float(fconv,p,x);
                         return make_printf(k$0,o,[4,acc$0,str],rest$7)};
             var p=prec$3[1];
             return function(x)
              {var str=convert_float(fconv,p,x);
               return make_printf(k$0,o,[4,acc$0,str],rest$7)}}
           else
            {if(0 === pad$5[0])
              {var _hc_=pad$5[2],_hd_=pad$5[1];
               if(typeof prec$3 === "number")
                return 0 === prec$3
                        ?function(x)
                          {var
                            str=convert_float(fconv,default_float_precision,x),
                            str$0=fix_padding(_hd_,_hc_,str);
                           return make_printf(k$0,o,[4,acc$0,str$0],rest$7)}
                        :function(p,x)
                          {var str=fix_padding(_hd_,_hc_,convert_float(fconv,p,x));
                           return make_printf(k$0,o,[4,acc$0,str],rest$7)};
               var p$0=prec$3[1];
               return function(x)
                {var str=fix_padding(_hd_,_hc_,convert_float(fconv,p$0,x));
                 return make_printf(k$0,o,[4,acc$0,str],rest$7)}}
             var _he_=pad$5[1];
             if(typeof prec$3 === "number")
              return 0 === prec$3
                      ?function(w,x)
                        {var
                          str=convert_float(fconv,default_float_precision,x),
                          str$0=fix_padding(_he_,w,str);
                         return make_printf(k$0,o,[4,acc$0,str$0],rest$7)}
                      :function(w,p,x)
                        {var str=fix_padding(_he_,w,convert_float(fconv,p,x));
                         return make_printf(k$0,o,[4,acc$0,str],rest$7)};
             var p$1=prec$3[1];
             return function(w,x)
              {var str=fix_padding(_he_,w,convert_float(fconv,p$1,x));
               return make_printf(k$0,o,[4,acc$0,str],rest$7)}}
          case 9:
           var rest$8=fmt$0[1];
           return function(b)
            {var _hg_=b?_c_:_d_;
             return make_printf(k$0,o,[4,acc$0,_hg_],rest$8)};
          case 10:
           var fmt$1=fmt$0[1],acc$1=[7,acc$0],acc$0=acc$1,fmt$0=fmt$1;
           continue;
          case 11:
           var
            fmt$2=fmt$0[2],
            str=fmt$0[1],
            acc$2=[2,acc$0,str],
            acc$0=acc$2,
            fmt$0=fmt$2;
           continue;
          case 12:
           var
            fmt$3=fmt$0[2],
            chr=fmt$0[1],
            acc$3=[3,acc$0,chr],
            acc$0=acc$3,
            fmt$0=fmt$3;
           continue;
          case 13:
           var rest$9=fmt$0[3],sub_fmtty=fmt$0[2],buf=buffer_create(16);
           bprint_fmtty(buf,sub_fmtty);
           var ty=buffer_contents(buf);
           return function(str)
            {return make_printf(k$0,o,[4,acc$0,ty],rest$9)};
          case 14:
           var rest$10=fmt$0[3],fmtty=fmt$0[2];
           return function(param)
            {var
              fmt$0=param[1],
              fmtty$0=erase_rel(symm(fmtty)),
              _hf_=type_format_gen(fmt$0,fmtty$0);
             if(typeof _hf_[2] === "number")
              {var fmt=_hf_[1];
               return make_printf(k$0,o,acc$0,concat_fmt(fmt,rest$10))}
             throw Type_mismatch};
          case 15:
           var rest$11=fmt$0[1];
           return function(f,x)
            {return make_printf
                     (k$0,
                      o,
                      [6,acc$0,function(o){return caml_call2(f,o,x)}],
                      rest$11)};
          case 16:
           var rest$12=fmt$0[1];
           return function(f){return make_printf(k$0,o,[6,acc$0,f],rest$12)};
          case 17:
           var
            fmt$4=fmt$0[2],
            fmting_lit=fmt$0[1],
            acc$4=[0,acc$0,fmting_lit],
            acc$0=acc$4,
            fmt$0=fmt$4;
           continue;
          case 18:
           var _ha_=fmt$0[1];
           if(0 === _ha_[0])
            {var
              rest$13=fmt$0[2],
              match=_ha_[1],
              fmt$5=match[1],
              k$3=
               function(acc,k,rest)
                {function k$0(koc,kacc)
                  {return make_printf(k,koc,[1,acc,[0,kacc]],rest)}
                 return k$0},
              k$1=k$3(acc$0,k$0,rest$13),
              k$0=k$1,
              acc$0=0,
              fmt$0=fmt$5;
             continue}
           var
            rest$14=fmt$0[2],
            match$0=_ha_[1],
            fmt$6=match$0[1],
            k$4=
             function(acc,k,rest)
              {function k$0(koc,kacc)
                {return make_printf(k,koc,[1,acc,[1,kacc]],rest)}
               return k$0},
            k$2=k$4(acc$0,k$0,rest$14),
            k$0=k$2,
            acc$0=0,
            fmt$0=fmt$6;
           continue;
          case 19:throw [0,Assert_failure,_bd_];
          case 20:
           var rest$15=fmt$0[3],new_acc=[8,acc$0,_be_];
           return function(param){return make_printf(k$0,o,new_acc,rest$15)};
          case 21:
           var rest$16=fmt$0[2];
           return function(n)
            {var new_acc=[4,acc$0,caml_format_int(_bf_,n)];
             return make_printf(k$0,o,new_acc,rest$16)};
          case 22:
           var rest$17=fmt$0[1];
           return function(c)
            {var new_acc=[5,acc$0,c];
             return make_printf(k$0,o,new_acc,rest$17)};
          case 23:
           var rest$18=fmt$0[2],ign=fmt$0[1];
           if(typeof ign === "number")
            switch(ign)
             {case 0:
               if(counter < 50)
                {var counter$1=counter + 1 | 0;
                 return make_invalid_arg(counter$1,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 1:
               if(counter < 50)
                {var counter$2=counter + 1 | 0;
                 return make_invalid_arg(counter$2,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 2:
               if(counter < 50)
                {var counter$3=counter + 1 | 0;
                 return make_invalid_arg(counter$3,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 3:throw [0,Assert_failure,_bg_];
              default:
               if(counter < 50)
                {var counter$4=counter + 1 | 0;
                 return make_invalid_arg(counter$4,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18])}
           else
            switch(ign[0])
             {case 0:
               if(counter < 50)
                {var counter$5=counter + 1 | 0;
                 return make_invalid_arg(counter$5,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 1:
               if(counter < 50)
                {var counter$6=counter + 1 | 0;
                 return make_invalid_arg(counter$6,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 2:
               if(counter < 50)
                {var counter$7=counter + 1 | 0;
                 return make_invalid_arg(counter$7,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 3:
               if(counter < 50)
                {var counter$8=counter + 1 | 0;
                 return make_invalid_arg(counter$8,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 4:
               if(counter < 50)
                {var counter$9=counter + 1 | 0;
                 return make_invalid_arg(counter$9,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 5:
               if(counter < 50)
                {var counter$10=counter + 1 | 0;
                 return make_invalid_arg(counter$10,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 6:
               if(counter < 50)
                {var counter$11=counter + 1 | 0;
                 return make_invalid_arg(counter$11,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 7:
               if(counter < 50)
                {var counter$12=counter + 1 | 0;
                 return make_invalid_arg(counter$12,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 8:
               var fmtty$0=ign[2];
               if(counter < 50)
                {var counter$15=counter + 1 | 0;
                 return make_from_fmtty$0
                         (counter$15,k$0,o,acc$0,fmtty$0,rest$18)}
               return caml_trampoline_return
                       (make_from_fmtty$0,[0,k$0,o,acc$0,fmtty$0,rest$18]);
              case 9:
               if(counter < 50)
                {var counter$13=counter + 1 | 0;
                 return make_invalid_arg(counter$13,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              default:
               if(counter < 50)
                {var counter$14=counter + 1 | 0;
                 return make_invalid_arg(counter$14,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18])}
          default:
           var
            rest$19=fmt$0[3],
            f=fmt$0[2],
            arity=fmt$0[1],
            _hb_=caml_call1(f,0);
           if(counter < 50)
            {var counter$0=counter + 1 | 0;
             return make_custom$0(counter$0,k$0,o,acc$0,rest$19,arity,_hb_)}
           return caml_trampoline_return
                   (make_custom$0,[0,k$0,o,acc$0,rest$19,arity,_hb_])}}
    function make_from_fmtty$0(counter,k,o,acc,fmtty,fmt)
     {if(typeof fmtty === "number")
       {if(counter < 50)
         {var counter$0=counter + 1 | 0;
          return make_invalid_arg(counter$0,k,o,acc,fmt)}
        return caml_trampoline_return(make_invalid_arg,[0,k,o,acc,fmt])}
      else
       switch(fmtty[0])
        {case 0:
          var rest=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest,fmt)};
         case 1:
          var rest$0=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$0,fmt)};
         case 2:
          var rest$1=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$1,fmt)};
         case 3:
          var rest$2=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$2,fmt)};
         case 4:
          var rest$3=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$3,fmt)};
         case 5:
          var rest$4=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$4,fmt)};
         case 6:
          var rest$5=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$5,fmt)};
         case 7:
          var rest$6=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$6,fmt)};
         case 8:
          var rest$7=fmtty[2];
          return function(param){return make_from_fmtty(k,o,acc,rest$7,fmt)};
         case 9:
          var
           rest$8=fmtty[3],
           ty2=fmtty[2],
           ty1=fmtty[1],
           ty=trans(symm(ty1),ty2);
          return function(param)
           {return make_from_fmtty(k,o,acc,concat_fmtty(ty,rest$8),fmt)};
         case 10:
          var rest$9=fmtty[1];
          return function(param,_g$_)
           {return make_from_fmtty(k,o,acc,rest$9,fmt)};
         case 11:
          var rest$10=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$10,fmt)};
         case 12:
          var rest$11=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$11,fmt)};
         case 13:throw [0,Assert_failure,_bh_];
         default:throw [0,Assert_failure,_bi_]}}
    function make_invalid_arg(counter,k,o,acc,fmt)
     {var _g__=[8,acc,_bj_];
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return make_printf$0(counter$0,k,o,_g__,fmt)}
      return caml_trampoline_return(make_printf$0,[0,k,o,_g__,fmt])}
    function make_custom$0(counter,k,o,acc,rest,arity,f)
     {if(arity)
       {var arity$0=arity[1];
        return function(x)
         {return make_custom(k,o,acc,rest,arity$0,caml_call1(f,x))}}
      var _g9_=[4,acc,f];
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return make_printf$0(counter$0,k,o,_g9_,rest)}
      return caml_trampoline_return(make_printf$0,[0,k,o,_g9_,rest])}
    function make_printf(k,o,acc,fmt)
     {return caml_trampoline(make_printf$0(0,k,o,acc,fmt))}
    function make_from_fmtty(k,o,acc,fmtty,fmt)
     {return caml_trampoline(make_from_fmtty$0(0,k,o,acc,fmtty,fmt))}
    function make_custom(k,o,acc,rest,arity,f)
     {return caml_trampoline(make_custom$0(0,k,o,acc,rest,arity,f))}
    function strput_acc(b,acc)
     {var acc$0=acc;
      for(;;)
       if(typeof acc$0 === "number")
        return 0;
       else
        switch(acc$0[0])
         {case 0:
           var fmting_lit=acc$0[2],p=acc$0[1];
           if(typeof fmting_lit === "number")
            switch(fmting_lit)
             {case 0:var s=_w_;break;
              case 1:var s=_x_;break;
              case 2:var s=_y_;break;
              case 3:var s=_z_;break;
              case 4:var s=_A_;break;
              case 5:var s=_B_;break;
              default:var s=_C_}
           else
            switch(fmting_lit[0])
             {case 0:var str=fmting_lit[1],s=str;break;
              case 1:var str$0=fmting_lit[1],s=str$0;break;
              default:var c=fmting_lit[1],s=_b_(_D_,make$0(1,c))}
           strput_acc(b,p);
           return add_string(b,s);
          case 1:
           var _g7_=acc$0[2],_g8_=acc$0[1];
           if(0 === _g7_[0])
            {var acc$1=_g7_[1];
             strput_acc(b,_g8_);
             add_string(b,_bk_);
             var acc$0=acc$1;
             continue}
           var acc$2=_g7_[1];
           strput_acc(b,_g8_);
           add_string(b,_bl_);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];
           strput_acc(b,p$2);
           return add_string(b,caml_call1(f,0));
          case 7:var acc$3=acc$0[1],acc$0=acc$3;continue;
          case 8:
           var msg=acc$0[2],p$3=acc$0[1];
           strput_acc(b,p$3);
           return invalid_arg(msg);
          case 2:
          case 4:
           var s$0=acc$0[2],p$0=acc$0[1];
           strput_acc(b,p$0);
           return add_string(b,s$0);
          default:
           var c$0=acc$0[2],p$1=acc$0[1];
           strput_acc(b,p$1);
           var pos=b[2];
           if(b[3] <= pos)resize(b,1);
           caml_string_unsafe_set(b[1],pos,c$0);
           b[2] = pos + 1 | 0;
           return 0}}
    function sprintf(fmt$0)
     {var fmt=fmt$0[1];
      function k(param,acc)
       {var b=create(64);strput_acc(b,acc);return sub_string(b[1],0,b[2])}
      return make_printf(k,0,0,fmt)}
    var printers=[0,0];
    function field(x,i$1)
     {var a=x[i$1 + 1];
      if(1 - (typeof a === "number"))
       {if(caml_obj_tag(a) === 252)return caml_call1(sprintf(_bm_),a);
        if(caml_obj_tag(a) === 253)
         {var s=caml_format_float(_f_,a),l=caml_ml_string_length(s),i=0;
          for(;;)
           {if(l <= i)return _b_(s,_e_);
            var
             match=caml_string_get(s,i),
             switch$0=48 <= match?58 <= match?0:1:45 === match?1:0;
            if(switch$0){var i$0=i + 1 | 0,i=i$0;continue}
            return s}}
        return _bn_}
      return caml_call1(sprintf(_bo_),a)}
    function other_fields(x,i)
     {if(x.length - 1 <= i)return _bp_;
      var _g5_=other_fields(x,i + 1 | 0),_g6_=field(x,i);
      return caml_call2(sprintf(_bq_),_g6_,_g5_)}
    function fields(x)
     {var match=x.length - 1;
      if(2 < match >>> 0)
       {var _g2_=other_fields(x,2),_g3_=field(x,1);
        return caml_call2(sprintf(_br_),_g3_,_g2_)}
      switch(match)
       {case 0:return _bs_;
        case 1:return _bt_;
        default:var _g4_=field(x,1);return caml_call1(sprintf(_bu_),_g4_)}}
    function to_string(x)
     {function conv(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var tl=param$0[2],hd=param$0[1];
            try {var _g0_=caml_call1(hd,x),_gZ_=_g0_}catch(_g1_){var _gZ_=0}
            if(_gZ_){var s=_gZ_[1];return s}
            var param$0=tl;
            continue}
          if(x === Out_of_memory)return _bv_;
          if(x === Stack_overflow)return _bw_;
          if(x[1] === Match_failure)
           {var match=x[2],char$0=match[3],line=match[2],file=match[1];
            return caml_call5
                    (sprintf(locfmt),file,line,char$0,char$0 + 5 | 0,_bx_)}
          if(x[1] === Assert_failure)
           {var
             match$0=x[2],
             char$1=match$0[3],
             line$0=match$0[2],
             file$0=match$0[1];
            return caml_call5
                    (sprintf(locfmt),file$0,line$0,char$1,char$1 + 6 | 0,_by_)}
          if(x[1] === Undefined_recursive_module)
           {var
             match$1=x[2],
             char$2=match$1[3],
             line$1=match$1[2],
             file$1=match$1[1];
            return caml_call5
                    (sprintf(locfmt),file$1,line$1,char$2,char$2 + 6 | 0,_bz_)}
          if(0 === caml_obj_tag(x))
           {var constructor=x[1][1];return _b_(constructor,fields(x))}
          return x[1]}}
      return conv(printers[1])}
    function register_printer(fn){printers[1] = [0,fn,printers[1]];return 0}
    function add_queue(x,q)
     {var c=[0,x,0],_gY_=q[1];
      return _gY_?(q[1] = c,_gY_[2] = c,0):(q[1] = c,q[2] = c,0)}
    var Empty_queue=[248,_bA_,caml_fresh_oo_id(0)];
    function take_queue(q)
     {var _gX_=q[2];
      if(_gX_)
       {var x=_gX_[1],tl=_gX_[2];q[2] = tl;if(0 === tl)q[1] = 0;return x}
      throw Empty_queue}
    function pp_enqueue(state,token)
     {var len=token[3];
      state[13] = state[13] + len | 0;
      return add_queue(token,state[27])}
    var pp_infinity=1000000010;
    function pp_output_string(state,s)
     {return caml_call3(state[17],s,0,caml_ml_string_length(s))}
    function pp_output_newline(state){return caml_call1(state[19],0)}
    function pp_output_spaces(state,n){return caml_call1(state[20],n)}
    function break_new_line(state,offset,width)
     {pp_output_newline(state);
      state[11] = 1;
      var
       indent=(state[6] - width | 0) + offset | 0,
       real_indent=min(state[8],indent);
      state[10] = real_indent;
      state[9] = state[6] - state[10] | 0;
      return pp_output_spaces(state,state[10])}
    function break_line(state,width){return break_new_line(state,0,width)}
    function break_same_line(state,width)
     {state[9] = state[9] - width | 0;return pp_output_spaces(state,width)}
    function pp_force_break_line(state)
     {var _gU_=state[2];
      if(_gU_)
       {var
         match=_gU_[1],
         width=match[2],
         bl_ty=match[1],
         _gV_=state[9] < width?1:0;
        if(_gV_)
         {if(0 !== bl_ty)return 5 <= bl_ty?0:break_line(state,width);
          var _gW_=0}
        else
         var _gW_=_gV_;
        return _gW_}
      return pp_output_newline(state)}
    function pp_skip_token(state)
     {var match=take_queue(state[27]),size=match[1],len=match[3];
      state[12] = state[12] - len | 0;
      state[9] = state[9] + size | 0;
      return 0}
    function format_pp_token(state,size,param)
     {if(typeof param === "number")
       switch(param)
        {case 0:
          var _gJ_=state[3];
          if(_gJ_)
           {var
             match=_gJ_[1],
             tabs=match[1],
             add_tab=
              function(n,ls)
               {if(ls)
                 {var l=ls[2],x=ls[1];
                  return caml_lessthan(n,x)?[0,n,ls]:[0,x,add_tab(n,l)]}
                return [0,n,0]};
            tabs[1] = add_tab(state[6] - state[9] | 0,tabs[1]);
            return 0}
          return 0;
         case 1:
          var _gK_=state[2];
          if(_gK_){var ls=_gK_[2];state[2] = ls;return 0}
          return 0;
         case 2:
          var _gL_=state[3];
          if(_gL_){var ls$0=_gL_[2];state[3] = ls$0;return 0}
          return 0;
         case 3:
          var _gM_=state[2];
          if(_gM_)
           {var match$0=_gM_[1],width=match$0[2];
            return break_line(state,width)}
          return pp_output_newline(state);
         case 4:
          var _gN_=state[10] !== (state[6] - state[9] | 0)?1:0;
          return _gN_?pp_skip_token(state):_gN_;
         default:
          var _gO_=state[5];
          if(_gO_)
           {var
             tags=_gO_[2],
             tag_name=_gO_[1],
             marker=caml_call1(state[24],tag_name);
            pp_output_string(state,marker);
            state[5] = tags;
            return 0}
          return 0}
      else
       switch(param[0])
        {case 0:
          var s=param[1];
          state[9] = state[9] - size | 0;
          pp_output_string(state,s);
          state[11] = 0;
          return 0;
         case 1:
          var off=param[2],n=param[1],_gP_=state[2];
          if(_gP_)
           {var match$1=_gP_[1],width$0=match$1[2],ty=match$1[1];
            switch(ty)
             {case 0:return break_same_line(state,n);
              case 1:return break_new_line(state,off,width$0);
              case 2:return break_new_line(state,off,width$0);
              case 3:
               return state[9] < size
                       ?break_new_line(state,off,width$0)
                       :break_same_line(state,n);
              case 4:
               return state[11]
                       ?break_same_line(state,n)
                       :state[9] < size
                         ?break_new_line(state,off,width$0)
                         :((state[6] - width$0 | 0) + off | 0) < state[10]
                           ?break_new_line(state,off,width$0)
                           :break_same_line(state,n);
              default:return break_same_line(state,n)}}
          return 0;
         case 2:
          var
           off$0=param[2],
           n$0=param[1],
           insertion_point=state[6] - state[9] | 0,
           _gQ_=state[3];
          if(_gQ_)
           {var
             match$2=_gQ_[1],
             tabs$0=match$2[1],
             find=
              function(n,param)
               {var param$0=param;
                for(;;)
                 {if(param$0)
                   {var l=param$0[2],x=param$0[1];
                    if(caml_greaterequal(x,n))return x;
                    var param$0=l;
                    continue}
                  throw Not_found}},
             _gR_=tabs$0[1];
            if(_gR_)
             {var x=_gR_[1];
              try
               {var _gS_=find(insertion_point,tabs$0[1]),x$0=_gS_}
              catch(_gT_)
               {_gT_ = caml_wrap_exception(_gT_);
                if(_gT_ !== Not_found)throw _gT_;
                var x$0=x}
              var tab=x$0}
            else
             var tab=insertion_point;
            var offset=tab - insertion_point | 0;
            return 0 <= offset
                    ?break_same_line(state,offset + n$0 | 0)
                    :break_new_line(state,tab + off$0 | 0,state[6])}
          return 0;
         case 3:
          var
           ty$0=param[2],
           off$1=param[1],
           insertion_point$0=state[6] - state[9] | 0;
          if(state[8] < insertion_point$0)pp_force_break_line(state);
          var
           offset$0=state[9] - off$1 | 0,
           bl_type=1 === ty$0?1:state[9] < size?ty$0:5;
          state[2] = [0,[0,bl_type,offset$0],state[2]];
          return 0;
         case 4:var tbox=param[1];state[3] = [0,tbox,state[3]];return 0;
         default:
          var tag_name$0=param[1],marker$0=caml_call1(state[23],tag_name$0);
          pp_output_string(state,marker$0);
          state[5] = [0,tag_name$0,state[5]];
          return 0}}
    function advance_loop(state)
     {for(;;)
       {var _gF_=state[27][2];
        if(_gF_)
         {var
           x=_gF_[1],
           size=x[1],
           len=x[3],
           tok=x[2],
           _gG_=size < 0?1:0,
           _gH_=_gG_?(state[13] - state[12] | 0) < state[9]?1:0:_gG_,
           _gI_=1 - _gH_;
          if(_gI_)
           {take_queue(state[27]);
            var size$0=0 <= size?size:pp_infinity;
            format_pp_token(state,size$0,tok);
            state[12] = len + state[12] | 0;
            continue}
          return _gI_}
        throw Empty_queue}}
    function advance_left(state)
     {try
       {var _gD_=advance_loop(state);return _gD_}
      catch(_gE_)
       {_gE_ = caml_wrap_exception(_gE_);
        if(_gE_ === Empty_queue)return 0;
        throw _gE_}}
    var q_elem=[0,-1,_bB_,0],scan_stack_bottom=[0,[0,-1,q_elem],0];
    function clear_scan_stack(state){state[1] = scan_stack_bottom;return 0}
    function set_size(state,ty)
     {var _gz_=state[1];
      if(_gz_)
       {var
         match=_gz_[1],
         queue_elem=match[2],
         left_tot=match[1],
         size=queue_elem[1],
         t=_gz_[2],
         tok=queue_elem[2];
        if(left_tot < state[12])return clear_scan_stack(state);
        if(typeof tok !== "number")
         switch(tok[0])
          {case 3:
            var
             _gB_=1 - ty,
             _gC_=
              _gB_?(queue_elem[1] = state[13] + size | 0,state[1] = t,0):_gB_;
            return _gC_;
           case 1:
           case 2:
            var
             _gA_=
              ty?(queue_elem[1] = state[13] + size | 0,state[1] = t,0):ty;
            return _gA_
           }
        return 0}
      return 0}
    var blank_line=make$0(80,32);
    function default_pp_mark_open_tag(s){return _b_(_bE_,_b_(s,_bD_))}
    function default_pp_mark_close_tag(s){return _b_(_bG_,_b_(s,_bF_))}
    function default_pp_print_open_tag(_gy_){return 0}
    function default_pp_print_close_tag(_gx_){return 0}
    function make_formatter(output,flush)
     {function i(_gw_){return 0}
      function h(_gv_){return 0}
      var pp_queue=[0,0,0],sys_tok=[0,-1,_bH_,0];
      add_queue(sys_tok,pp_queue);
      var
       sys_scan_stack=[0,[0,1,sys_tok],scan_stack_bottom],
       ppf=
        [0,
         sys_scan_stack,
         0,
         0,
         0,
         0,
         78,
         10,
         68,
         78,
         0,
         1,
         1,
         1,
         1,
         max_int,
         _bI_,
         output,
         flush,
         h,
         i,
         0,
         0,
         default_pp_mark_open_tag,
         default_pp_mark_close_tag,
         default_pp_print_open_tag,
         default_pp_print_close_tag,
         pp_queue];
      ppf[19] = function(_gu_){return caml_call3(ppf[17],_bC_,0,1)};
      ppf[20]
      =
      function(n$1)
       {var n=n$1;
        for(;;)
         {var _gt_=0 < n?1:0;
          if(_gt_)
           {if(80 < n)
             {caml_call3(ppf[17],blank_line,0,80);
              var n$0=n - 80 | 0,n=n$0;
              continue}
            return caml_call3(ppf[17],blank_line,0,n)}
          return _gt_}};
      return ppf}
    function formatter_of_out_channel(oc)
     {function _gs_(param){return caml_ml_flush(oc)}
      return make_formatter
              (function(s,ofs,len)
                {if(0 <= ofs)
                  if(0 <= len)
                   if(!((caml_ml_string_length(s) - len | 0) < ofs))
                    return caml_ml_output(oc,s,ofs,len);
                 return invalid_arg(_g_)},
               _gs_)}
    var stdbuf=create(512),state=formatter_of_out_channel(stdout);
    formatter_of_out_channel(stderr);
    function _bJ_(_gr_){return 0}
    make_formatter
     (function(s,offset,len)
       {var _go_=offset < 0?1:0;
        if(_go_)
         var _gp_=_go_;
        else
         var
          _gq_=len < 0?1:0,
          _gp_=_gq_ || ((caml_ml_string_length(s) - len | 0) < offset?1:0);
        if(_gp_)invalid_arg(_v_);
        var new_position=stdbuf[2] + len | 0;
        if(stdbuf[3] < new_position)resize(stdbuf,len);
        blit$0(s,offset,stdbuf[1],stdbuf[2],len);
        stdbuf[2] = new_position;
        return 0},
      _bJ_);
    var g=exit_function[1];
    exit_function[1]
    =
    function(param)
     {for(;;)
       {if(1 < state[14])
         {if(1 < state[14])
           {if(state[14] < state[15])
             {pp_enqueue(state,[0,0,1,0]);set_size(state,1);set_size(state,0)}
            state[14] = state[14] - 1 | 0}
          continue}
        state[13] = pp_infinity;
        advance_left(state);
        state[12] = 1;
        state[13] = 1;
        var _gm_=state[27];
        _gm_[1] = 0;
        _gm_[2] = 0;
        clear_scan_stack(state);
        state[2] = 0;
        state[3] = 0;
        state[4] = 0;
        state[5] = 0;
        state[10] = 0;
        state[14] = 0;
        state[9] = state[6];
        state[14] = state[14] + 1 | 0;
        var br_ty=3,indent=0;
        if(state[14] < state[15])
         {var tok$0=[0,-state[13] | 0,[3,indent,br_ty],0];
          pp_enqueue(state,tok$0);
          state[1] = [0,[0,state[13],tok$0],state[1]]}
        else
         if(state[14] === state[15])
          {var
            _gn_=state[16],
            size=caml_ml_string_length(_gn_),
            tok=[0,size,[0,_gn_],size];
           pp_enqueue(state,tok);
           advance_left(state)}
        caml_call1(state[18],0);
        return caml_call1(g,0)}};
    var window=joo_global_object,no_handler=null,undefined$0=undefined;
    function case$0(x,f,g)
     {return x == no_handler?caml_call1(f,0):caml_call1(g,x)}
    var
     true$0=true,
     false$0=false,
     array_constructor=window.Array,
     date_constr=window.Date,
     Error=[248,_bK_,caml_fresh_oo_id(0)],
     error_constr=window.Error,
     exn=[0,Error,{}],
     slot=caml_obj_tag(exn) === 248?exn:exn[1];
    caml_register_named_value(caml_new_string("jsError"),slot);
    (function(exn){throw exn});
    register_printer
     (function(param)
       {if(param[1] === Error)
         {var e=param[2];return [0,caml_js_to_string(e.toString())]}
        return 0});
    register_printer
     (function(e)
       {return e instanceof array_constructor
                ?0
                :[0,caml_js_to_string(e.toString())]});
    function handler(f)
     {return function(e)
       {if(1 - (e == no_handler?1:0))
         {var res=caml_call1(f,e);
          if(1 - (res | 0))e.preventDefault();
          return res}
        var e$0=event,res$0=caml_call1(f,e$0);
        if(1 - (res$0 | 0))e$0.returnValue = res$0;
        return res$0}}
    var d="2d",document=window.document;
    function getElementById_coerce(id,coerce)
     {function _gj_(e)
       {var x=caml_call1(coerce,e);
        function _gl_(x){return [0,x]}
        return case$0(x,function(param){return 0},_gl_)}
      function _gk_(param){return 0}
      return case$0(document.getElementById(id.toString()),_gk_,_gj_)}
    caml_fresh_oo_id(0);
    var html_element=window.HTMLElement;
    html_element === undefined$0;
    function unsafeCoerce(tag,e)
     {var _gi_=tag.toString();
      return e.tagName.toLowerCase() === _gi_?e:no_handler}
    function button(e){return unsafeCoerce(_bL_,e)}
    function canvas(e){return unsafeCoerce(_bM_,e)}
    function div(e){return unsafeCoerce(_bN_,e)}
    function input(e){return unsafeCoerce(_bO_,e)}
    function select(e){return unsafeCoerce(_bP_,e)}
    function create$0(param)
     {var
       xmlHttpRequest=window.XMLHttpRequest,
       activeXObject=window.activeXObject;
      try
       {var _gd_=new xmlHttpRequest();return _gd_}
      catch(_ge_)
       {try
         {var _gc_=new activeXObject("Msxml2.XMLHTTP");return _gc_}
        catch(_gf_)
         {try
           {var _gb_=new activeXObject("Msxml3.XMLHTTP");return _gb_}
          catch(_gg_)
           {try
             {var _ga_=new activeXObject("Microsoft.XMLHTTP");return _ga_}
            catch(_gh_){throw [0,Assert_failure,_bQ_]}}}}}
    caml_fresh_oo_id(0);
    caml_fresh_oo_id(0);
    function map_strings(sep,fn,l)
     {var l$0=map(fn,l);
      if(l$0)
       {var seplen=caml_ml_string_length(sep),acc=0,param=l$0,pos$1=0;
        for(;;)
         {if(param)
           {var _f7_=param[2],_f8_=param[1];
            if(_f7_)
             {var
               x=(caml_ml_string_length(_f8_) + seplen | 0) + acc | 0,
               acc$0=caml_greaterequal(x,acc)?x:invalid_arg(_s_),
               acc=acc$0,
               param=_f7_;
              continue}
            var _f$_=caml_ml_string_length(_f8_) + acc | 0}
          else
           var _f$_=acc;
          var dst=caml_create_bytes(_f$_),pos=pos$1,param$0=l$0;
          for(;;)
           {if(param$0)
             {var _f9_=param$0[2],_f__=param$0[1];
              if(_f9_)
               {caml_blit_string(_f__,0,dst,pos,caml_ml_string_length(_f__));
                caml_blit_string
                 (sep,0,dst,pos + caml_ml_string_length(_f__) | 0,seplen);
                var
                 pos$0=(pos + caml_ml_string_length(_f__) | 0) + seplen | 0,
                 pos=pos$0,
                 param$0=_f9_;
                continue}
              caml_blit_string(_f__,0,dst,pos,caml_ml_string_length(_f__));
              return dst}
            return dst}}}
      return _t_}
    function to_string$0(t)
     {if(typeof t === "number")
       return _bR_;
      else
       switch(t[0])
        {case 0:var i=t[1];return caml_call1(sprintf(_bS_),i);
         case 1:var i$0=t[1];return caml_call1(sprintf(_bT_),i$0);
         case 2:var b=t[1];return caml_call1(sprintf(_bU_),b);
         case 3:var f=t[1];return caml_call1(sprintf(_bV_),f);
         case 4:var s=t[1];return caml_call1(sprintf(_bW_),s);
         case 5:var s$0=t[1];return caml_call1(sprintf(_bX_),s$0);
         case 6:
          var ts=t[1],_f4_=map_strings(_bY_,to_string$0,ts);
          return caml_call1(sprintf(_bZ_),_f4_);
         default:
          var
           ts$0=t[1],
           _f5_=
            map_strings
             (_b1_,
              function(param)
               {var t=param[2],s=param[1],_f6_=to_string$0(t);
                return caml_call2(sprintf(_b0_),s,_f6_)},
              ts$0);
          return caml_call1(sprintf(_b2_),_f5_)}}
    function int_of_rpc(x)
     {if(typeof x !== "number")
       switch(x[0])
        {case 0:var i=x[1];return caml_int64_to_int32(i);
         case 4:var s=x[1];return caml_int_of_string(s)
         }
      var _f3_=to_string$0(x);
      return failwith(caml_call1(sprintf(_b3_),_f3_))}
    function bool_of_rpc(x)
     {if(typeof x !== "number" && 2 === x[0]){var b=x[1];return b}
      var _f2_=to_string$0(x);
      return failwith(caml_call1(sprintf(_b4_),_f2_))}
    function float_of_rpc(x)
     {if(typeof x !== "number")
       switch(x[0])
        {case 0:var i=x[1];return caml_int64_to_float(i);
         case 1:var i$0=x[1];return i$0;
         case 3:var f=x[1];return f;
         case 4:var s=x[1];return caml_float_of_string(s)
         }
      var _f1_=to_string$0(x);
      return failwith(caml_call1(sprintf(_b5_),_f1_))}
    function string_of_rpc(x)
     {if(typeof x !== "number" && 4 === x[0]){var s=x[1];return s}
      var _f0_=to_string$0(x);
      return failwith(caml_call1(sprintf(_b6_),_f0_))}
    var promise_global=window.Promise;
    function resolve(value){return promise_global.resolve(value)}
    function reject(value){return promise_global.reject(value)}
    var Parse_error=[248,_b7_,caml_fresh_oo_id(0)];
    function is_parsing_object(s)
     {var _fZ_=s[2];if(_fZ_)if(3 !== _fZ_[1][0])return 1;return 0}
    function get_parse_result(s)
     {var _fY_=s[1];
      if(typeof _fY_ !== "number" && 10 === _fY_[0])
       {var v=_fY_[1];return [0,v]}
      return 0}
    function ivalue_to_str(param)
     {switch(param[0])
       {case 0:return _b8_;
        case 1:return _b9_;
        case 2:return _b__;
        default:return _b$_}}
    function current_cursor_value(param)
     {if(typeof param === "number")
       switch(param)
        {case 4:return _cc_;case 0:case 1:return _ca_;default:return _cb_}
      else
       switch(param[0])
        {case 0:return _cd_;
         case 10:return _ch_;
         case 1:
         case 2:return _ce_;
         case 7:
         case 8:
         case 9:return _cg_;
         default:return _cf_}}
    function is_space(c)
     {var _fU_=32 === c?1:0;
      if(_fU_)
       var _fV_=_fU_;
      else
       {var _fW_=9 === c?1:0;
        if(_fW_)
         var _fV_=_fW_;
        else
         var _fX_=10 === c?1:0,_fV_=_fX_ || (13 === c?1:0)}
      return _fV_}
    function update_line_num(s,c)
     {var _fS_=10 === c?1:0,_fT_=_fS_?(s[4] = s[4] + 1 | 0,0):_fS_;
      return _fT_}
    function clist_to_string(param)
     {var len=length(param),b=caml_create_bytes(len),indx=0,param$0=param;
      for(;;)
       {if(param$0)
         {var param$1=param$0[2],c=param$0[1];
          caml_bytes_set(b,indx,c);
          var indx$0=indx + 1 | 0,indx=indx$0,param$0=param$1;
          continue}
        return copy(b)}}
    function raise_unexpected_char(s,c,t){throw [0,Parse_error,[0,s[4],c,t]]}
    function raise_invalid_value(s,v,t){throw [0,Parse_error,[1,s[4],v,t]]}
    function raise_unterminated_value(s,v){throw [0,Parse_error,[3,s[4],v]]}
    function raise_internal_error(s,m){throw [0,Parse_error,[4,s[4],m]]}
    function finish_value(s,v)
     {var _fQ_=s[2];
      if(_fQ_)
       {var _fR_=_fQ_[1];
        switch(_fR_[0])
         {case 1:
           if(typeof v !== "number" && 4 === v[0])
            {var key=v[1],tl=_fQ_[2],fields=_fR_[1];
             s[2] = [0,[2,fields,key],tl];
             s[1] = 3;
             return 0}
           break;
          case 2:
           var tl$0=_fQ_[2],key$0=_fR_[2],fields$0=_fR_[1];
           s[2] = [0,[0,[0,[0,key$0,v],fields$0]],tl$0];
           s[1] = 4;
           return 0;
          case 3:
           var tl$1=_fQ_[2],l=_fR_[1];
           s[2] = [0,[3,[0,v,l]],tl$1];
           s[1] = 4;
           return 0
          }
        return raise_internal_error(s,_b_(_cj_,_b_(ivalue_to_str(_fR_),_ci_)))}
      s[1] = [10,v];
      return 0}
    function pop_stack(s)
     {var _fO_=s[2];
      if(_fO_)
       {var _fP_=_fO_[1];
        switch(_fP_[0])
         {case 0:
           var tl=_fO_[2],fields=_fP_[1];
           s[2] = tl;
           return finish_value(s,[7,rev(fields)]);
          case 3:
           var tl$0=_fO_[2],l=_fP_[1];
           s[2] = tl$0;
           return finish_value(s,[6,rev(l)]);
          default:
           return raise_internal_error
                   (s,_b_(_cl_,_b_(ivalue_to_str(_fP_),_ck_)))}}
      return raise_internal_error(s,_cm_)}
    function parse(state,str)
     {a:
      for(;;)
       {if(0 === get_parse_result(state))
         {var c=caml_call1(str,0);
          for(;;)
           {var
             tostring_with_leading_zero_check=
              function(is)
               {var param=rev(is);
                if(param)
                 {if(48 === param[1])
                   {var _fN_=param[2];
                    if(_fN_)
                     {if(0 < length(_fN_))
                       {var n=clist_to_string(param);
                        throw [0,Parse_error,[2,state[4],n]]}
                      var switch$1=1}
                    else
                     var switch$0=0,switch$1=0}
                  else
                   var switch$1=1;
                  if(switch$1)var switch$0=1}
                else
                 var switch$0=0;
                return clist_to_string(param)},
             finish_int$0=
              function(tostring_with_leading_zero_check)
               {function finish_int(is)
                 {var str=tostring_with_leading_zero_check(is);
                  try
                   {var _fL_=caml_int64_of_string(str),int$0=_fL_}
                  catch(_fM_)
                   {_fM_ = caml_wrap_exception(_fM_);
                    if(_fM_[1] !== Failure)throw _fM_;
                    var int$0=raise_invalid_value(state,str,_cn_)}
                  return finish_value(state,[0,int$0])}
                return finish_int},
             finish_int=finish_int$0(tostring_with_leading_zero_check),
             finish_int_exp$0=
              function(tostring_with_leading_zero_check)
               {function finish_int_exp(is,es)
                 {var
                   int$0=tostring_with_leading_zero_check(is),
                   exp=clist_to_string(rev(es)),
                   str=caml_call2(sprintf(_co_),int$0,exp);
                  try
                   {var _fJ_=caml_float_of_string(str),float$0=_fJ_}
                  catch(_fK_)
                   {_fK_ = caml_wrap_exception(_fK_);
                    if(_fK_[1] !== Failure)throw _fK_;
                    var float$0=raise_invalid_value(state,str,_cp_)}
                  return finish_value(state,[3,float$0])}
                return finish_int_exp},
             finish_int_exp=finish_int_exp$0(tostring_with_leading_zero_check),
             finish_float$0=
              function(tostring_with_leading_zero_check)
               {function finish_float(is,fs)
                 {var
                   int$0=tostring_with_leading_zero_check(is),
                   frac=clist_to_string(rev(fs)),
                   str=caml_call2(sprintf(_cq_),int$0,frac);
                  try
                   {var _fH_=caml_float_of_string(str),float$0=_fH_}
                  catch(_fI_)
                   {_fI_ = caml_wrap_exception(_fI_);
                    if(_fI_[1] !== Failure)throw _fI_;
                    var float$0=raise_invalid_value(state,str,_cr_)}
                  return finish_value(state,[3,float$0])}
                return finish_float},
             finish_float=finish_float$0(tostring_with_leading_zero_check),
             finish_float_exp$0=
              function(tostring_with_leading_zero_check)
               {function finish_float_exp(is,fs,es)
                 {var
                   int$0=tostring_with_leading_zero_check(is),
                   frac=clist_to_string(rev(fs)),
                   exp=clist_to_string(rev(es)),
                   str=caml_call3(sprintf(_cs_),int$0,frac,exp);
                  try
                   {var _fF_=caml_float_of_string(str),float$0=_fF_}
                  catch(_fG_)
                   {_fG_ = caml_wrap_exception(_fG_);
                    if(_fG_[1] !== Failure)throw _fG_;
                    var float$0=raise_invalid_value(state,str,_ct_)}
                  return finish_value(state,[3,float$0])}
                return finish_float_exp},
             finish_float_exp=
              finish_float_exp$0(tostring_with_leading_zero_check),
             _ft_=state[1];
            if(typeof _ft_ === "number")
             switch(_ft_)
              {case 0:
                if(46 <= c)
                 if(58 <= c)
                  {var switcher=c - 91 | 0;
                   if(32 < switcher >>> 0)
                    var switch$0=0;
                   else
                    switch(switcher)
                     {case 0:state[2] = [0,_cv_,state[2]];var switch$0=2;break;
                      case 2:
                       var switch$0=0 === state[2]?0:(pop_stack(state),2);break;
                      case 11:state[1] = _cw_;var switch$0=2;break;
                      case 19:state[1] = _cx_;var switch$0=2;break;
                      case 25:state[1] = _cy_;var switch$0=2;break;
                      case 32:state[1] = 2;var switch$0=2;break;
                      default:var switch$0=0}}
                 else
                  var switch$0=48 <= c?1:0;
                else
                 var switch$0=34 === c?(state[1] = _cz_,2):45 <= c?1:0;
                switch(switch$0)
                 {case 0:
                   if(is_space(c))
                    update_line_num(state,c);
                   else
                    raise_unexpected_char(state,c,_cu_);
                   break;
                  case 1:state[1] = [3,[0,c,0]];break
                  }
                break;
               case 1:
                if(92 <= c)
                 var
                  switch$1=
                   111 <= c
                    ?116 === c?(state[1] = _cA_,1):123 === c?(state[1] = 2,1):0
                    :102 === c
                      ?(state[1] = _cC_,1)
                      :110 <= c?(state[1] = _cD_,1):0;
                else
                 {if(46 <= c)
                   if(58 <= c)
                    if(91 <= c)
                     {state[2] = [0,_cE_,state[2]];
                      state[1] = 0;
                      var switch$1=1,switch$2=0}
                    else
                     var switch$1=0,switch$2=0;
                   else
                    if(48 <= c)var switch$2=1;else var switch$1=0,switch$2=0;
                  else
                   if(34 === c)
                    {state[1] = _cF_;var switch$1=1,switch$2=0}
                   else
                    if(45 <= c)var switch$2=1;else var switch$1=0,switch$2=0;
                  if(switch$2){state[1] = [3,[0,c,0]];var switch$1=1}}
                if(!switch$1)
                 if(is_space(c))
                  update_line_num(state,c);
                 else
                  raise_unexpected_char(state,c,_cB_);
                break;
               case 2:
                if(34 === c)
                 {state[2] = [0,_cG_,state[2]];state[1] = _cH_}
                else
                 if(125 === c)
                  finish_value(state,_cI_);
                 else
                  if(is_space(c))
                   update_line_num(state,c);
                  else
                   raise_unexpected_char(state,c,_cJ_);
                break;
               case 3:
                if(58 === c)
                 state[1] = 0;
                else
                 if(is_space(c))
                  update_line_num(state,c);
                 else
                  raise_unexpected_char(state,c,_cK_);
                break;
               case 4:
                if(44 === c)
                 state[1] = is_parsing_object(state)?5:1;
                else
                 if(93 === c)
                  if(is_parsing_object(state))
                   raise_unexpected_char(state,c,_cL_);
                  else
                   pop_stack(state);
                 else
                  if(125 === c)
                   if(is_parsing_object(state))
                    pop_stack(state);
                   else
                    raise_unexpected_char(state,c,_cM_);
                  else
                   if(is_space(c))
                    update_line_num(state,c);
                   else
                    raise_unexpected_char(state,c,_cN_);
                break;
               default:
                if(34 === c)
                 {var _fu_=state[2];
                  if(_fu_)
                   {var _fv_=_fu_[1];
                    if(0 === _fv_[0])
                     {var tl=_fu_[2],fields=_fv_[1];state[2] = [0,[1,fields],tl]}
                    else
                     raise_internal_error
                      (state,_b_(_cQ_,_b_(ivalue_to_str(_fv_),_cP_)))}
                  else
                   raise_internal_error(state,_cR_);
                  state[1] = _cO_}
                else
                 if(is_space(c))
                  update_line_num(state,c);
                 else
                  raise_unexpected_char(state,c,_cS_)}
            else
             switch(_ft_[0])
              {case 0:
                var
                 rem=_ft_[1],
                 switch$3=
                  108 === c
                   ?1 === rem
                     ?(finish_value(state,0),1)
                     :2 === rem?(state[1] = _cT_,1):0
                   :117 === c?3 === rem?(state[1] = _cV_,1):0:0;
                if(!switch$3)raise_unexpected_char(state,c,_cU_);
                break;
               case 1:
                var
                 rem$0=_ft_[1],
                 switch$4=
                  101 === c
                   ?1 === rem$0?(finish_value(state,_cW_),1):0
                   :114 === c
                     ?3 === rem$0?(state[1] = _cY_,1):0
                     :117 === c?2 === rem$0?(state[1] = _cZ_,1):0:0;
                if(!switch$4)raise_unexpected_char(state,c,_cX_);
                break;
               case 2:
                var rem$1=_ft_[1];
                if(109 <= c)
                 var switch$5=115 === c?2 === rem$1?(state[1] = _c0_,1):0:0;
                else
                 if(97 <= c)
                  {var switcher$0=c - 97 | 0;
                   switch(switcher$0)
                    {case 0:
                      var switch$5=4 === rem$1?(state[1] = _c2_,1):0;break;
                     case 4:
                      var switch$5=1 === rem$1?(finish_value(state,_c3_),1):0;
                      break;
                     case 11:
                      var switch$5=3 === rem$1?(state[1] = _c4_,1):0;break;
                     default:var switch$5=0}}
                 else
                  var switch$5=0;
                if(!switch$5)raise_unexpected_char(state,c,_c1_);
                break;
               case 3:
                var is=_ft_[1];
                if(70 <= c)
                 var
                  _fw_=c - 94 | 0,
                  switch$6=
                   30 < _fw_ >>> 0?32 < (_fw_ + 1 | 0) >>> 0?0:2:7 === _fw_?1:0;
                else
                 if(48 <= c)
                  var
                   switch$6=
                    58 <= c?69 <= c?1:0:(state[1] = [3,[0,c,is]],3);
                 else
                  {var switcher$1=c - 44 | 0;
                   if(2 < switcher$1 >>> 0)
                    var switch$6=0;
                   else
                    switch(switcher$1)
                     {case 0:var switch$6=2;break;
                      case 1:var switch$6=0;break;
                      default:state[1] = [4,is,0];var switch$6=3}}
                switch(switch$6)
                 {case 0:
                   if(is_space(c))
                    {update_line_num(state,c);finish_int(is)}
                   else
                    raise_unexpected_char(state,c,_c5_);
                   break;
                  case 1:state[1] = [5,is,0];break;
                  case 2:finish_int(is);continue
                  }
                break;
               case 4:
                var fs=_ft_[2],is$0=_ft_[1];
                if(70 <= c)
                 var
                  _fx_=c - 94 | 0,
                  switch$7=
                   30 < _fx_ >>> 0?32 < (_fx_ + 1 | 0) >>> 0?0:2:7 === _fx_?1:0;
                else
                 var
                  switch$7=
                   44 === c
                    ?2
                    :58 <= c
                      ?69 <= c?1:0
                      :48 <= c?(state[1] = [4,is$0,[0,c,fs]],3):0;
                switch(switch$7)
                 {case 0:
                   if(is_space(c))
                    {update_line_num(state,c);finish_float(is$0,fs)}
                   else
                    raise_unexpected_char(state,c,_c6_);
                   break;
                  case 1:state[1] = [6,is$0,fs,0];break;
                  case 2:finish_float(is$0,fs);continue
                  }
                break;
               case 5:
                var es=_ft_[2],is$1=_ft_[1];
                if(48 <= c)
                 var
                  _fy_=c - 93 | 0,
                  switch$8=
                   32 < _fy_ >>> 0
                    ?-35 <= _fy_?0:1
                    :30 < (_fy_ - 1 | 0) >>> 0?2:0;
                else
                 var _fz_=c - 43 | 0,switch$8=2 < _fz_ >>> 0?0:1 === _fz_?2:1;
                switch(switch$8)
                 {case 0:
                   if(is_space(c))
                    {update_line_num(state,c);finish_int_exp(is$1,es)}
                   else
                    raise_unexpected_char(state,c,_c7_);
                   break;
                  case 1:state[1] = [5,is$1,[0,c,es]];break;
                  default:finish_int_exp(is$1,es);continue}
                break;
               case 6:
                var es$0=_ft_[3],fs$0=_ft_[2],is$2=_ft_[1];
                if(48 <= c)
                 var
                  _fA_=c - 93 | 0,
                  switch$9=
                   32 < _fA_ >>> 0
                    ?-35 <= _fA_?0:1
                    :30 < (_fA_ - 1 | 0) >>> 0?2:0;
                else
                 var _fB_=c - 43 | 0,switch$9=2 < _fB_ >>> 0?0:1 === _fB_?2:1;
                switch(switch$9)
                 {case 0:
                   if(is_space(c))
                    {update_line_num(state,c);finish_float_exp(is$2,fs$0,es$0)}
                   else
                    raise_unexpected_char(state,c,_c8_);
                   break;
                  case 1:state[1] = [6,is$2,fs$0,[0,c,es$0]];break;
                  default:finish_float_exp(is$2,fs$0,es$0);continue}
                break;
               case 7:
                var cs=_ft_[1];
                if(34 === c)
                 finish_value(state,[4,clist_to_string(rev(cs))]);
                else
                 if(92 === c)
                  state[1] = [8,cs];
                 else
                  {var
                    switch$10=
                     14 <= c?34 === c?1:92 === c?1:0:11 === c?0:8 <= c?1:0,
                    _fC_=switch$10?0:1;
                   if(_fC_)
                    state[1] = [7,[0,c,cs]];
                   else
                    raise_unexpected_char(state,c,_c9_)}
                break;
               case 8:
                var cs$0=_ft_[1],_fD_=c - 34 | 0;
                if(13 < _fD_ >>> 0)
                 {var switcher$2=_fD_ - 58 | 0;
                  if(25 < switcher$2 >>> 0)
                   var switch$11=0;
                  else
                   switch(switcher$2)
                    {case 0:var switch$11=1;break;
                     case 6:state[1] = [7,[0,8,cs$0]];var switch$11=2;break;
                     case 10:state[1] = [7,[0,12,cs$0]];var switch$11=2;break;
                     case 18:state[1] = [7,[0,10,cs$0]];var switch$11=2;break;
                     case 22:state[1] = [7,[0,13,cs$0]];var switch$11=2;break;
                     case 24:state[1] = [7,[0,9,cs$0]];var switch$11=2;break;
                     case 25:state[1] = [9,cs$0,0,4];var switch$11=2;break;
                     default:var switch$11=0}}
                else
                 var switch$11=11 < (_fD_ - 1 | 0) >>> 0?1:0;
                switch(switch$11)
                 {case 0:raise_unexpected_char(state,c,_c__);break;
                  case 1:state[1] = [7,[0,c,cs$0]];break
                  }
                break;
               case 9:
                var
                 rem$2=_ft_[3],
                 hs=_ft_[2],
                 cs$1=_ft_[1],
                 _fs_=c - 48 | 0,
                 switch$12=
                  22 < _fs_ >>> 0
                   ?5 < (_fs_ - 49 | 0) >>> 0?0:1
                   :6 < (_fs_ - 10 | 0) >>> 0?1:0,
                 _fE_=switch$12?1:0;
                if(_fE_)
                 {var hs$0=[0,c,hs];
                  state[1]
                  =
                  1 < rem$2
                   ?[9,cs$1,hs$0,rem$2 - 1 | 0]
                   :[7,append(hs$0,[0,117,[0,92,cs$1]])]}
                else
                 raise_unexpected_char(state,c,_c$_);
                break;
               default:raise_internal_error(state,_da_)}
            state[3] = state[3] + 1 | 0;
            continue a}}
        var match=get_parse_result(state);
        if(match){var v=match[1];return [0,v]}
        return [1,state]}}
    caml_fresh_oo_id(0);
    caml_fresh_oo_id(0);
    function to_string$1(param)
     {return 3450105 === param
              ?_db_
              :4245542 <= param
                ?4393405 <= param?_dc_:_dd_
                :3545557 <= param?_de_:_df_}
    function of_string(param)
     {return caml_string_notequal(param,_dg_)
              ?caml_string_notequal(param,_dh_)
                ?caml_string_notequal(param,_di_)
                  ?caml_string_notequal(param,_dj_)
                    ?caml_string_notequal(param,_dk_)?0:_dl_
                    :_dm_
                  :_dn_
                :_do_
              :_dp_}
    function of_string$0(param)
     {return caml_string_notequal(param,_dt_)
              ?caml_string_notequal(param,_du_)
                ?caml_string_notequal(param,_dv_)?0:_dw_
                :_dx_
              :_dy_}
    function data_point_of_rpc(x)
     {if(typeof x !== "number" && 7 === x[0])
       {var
         dict=x[1],
         xs=
          map
           (function(param)
             {var v=param[2],k=param[1];return [0,lowercase_ascii$0(k),v]},
            dict),
         xs$0=xs,
         state=state$0;
        for(;;)
         {var
           a6=state[7],
           a5=state[6],
           a4=state[5],
           a3=state[4],
           a2=state[3],
           a1=state[2],
           a0=state[1];
          if(xs$0)
           {var _fq_=xs$0[1],_fr_=_fq_[1];
            if(caml_string_notequal(_fr_,_dB_))
             {if(caml_string_notequal(_fr_,_dC_))
               {if(caml_string_notequal(_fr_,_dD_))
                 {if(caml_string_notequal(_fr_,_dE_))
                   {if(caml_string_notequal(_fr_,_dF_))
                     {if(caml_string_notequal(_fr_,_dG_))
                       {if(caml_string_notequal(_fr_,_dH_))
                         {var xs$1=xs$0[2],xs$0=xs$1;continue}
                        var
                         xs$2=xs$0[2],
                         x$0=_fq_[2],
                         state$1=[0,a0,a1,a2,a3,a4,a5,[0,float_of_rpc(x$0)]],
                         xs$0=xs$2,
                         state=state$1;
                        continue}
                      var
                       xs$3=xs$0[2],
                       x$1=_fq_[2],
                       state$2=[0,a0,a1,a2,a3,a4,[0,float_of_rpc(x$1)],a6],
                       xs$0=xs$3,
                       state=state$2;
                      continue}
                    var
                     xs$4=xs$0[2],
                     x$2=_fq_[2],
                     state$3=[0,[0,int_of_rpc(x$2)],a1,a2,a3,a4,a5,a6],
                     xs$0=xs$4,
                     state=state$3;
                    continue}
                  var
                   xs$5=xs$0[2],
                   x$3=_fq_[2],
                   state$4=[0,a0,a1,a2,a3,[0,float_of_rpc(x$3)],a5,a6],
                   xs$0=xs$5,
                   state=state$4;
                  continue}
                var
                 xs$6=xs$0[2],
                 x$4=_fq_[2],
                 state$5=[0,a0,a1,a2,[0,float_of_rpc(x$4)],a4,a5,a6],
                 xs$0=xs$6,
                 state=state$5;
                continue}
              var
               xs$7=xs$0[2],
               x$5=_fq_[2],
               state$6=[0,a0,a1,[0,float_of_rpc(x$5)],a3,a4,a5,a6],
               xs$0=xs$7,
               state=state$6;
              continue}
            var
             xs$8=xs$0[2],
             x$6=_fq_[2],
             state$7=[0,a0,[0,float_of_rpc(x$6)],a2,a3,a4,a5,a6],
             xs$0=xs$8,
             state=state$7;
            continue}
          if(a6)
           var x$7=a6[1],a6$0=x$7;
          else
           var a6$0=failwith(caml_call1(sprintf(_dV_),_dU_));
          if(a5)
           var x$8=a5[1],a5$0=x$8;
          else
           var a5$0=failwith(caml_call1(sprintf(_dT_),_dS_));
          if(a4)
           var x$9=a4[1],a4$0=x$9;
          else
           var a4$0=failwith(caml_call1(sprintf(_dR_),_dQ_));
          if(a3)
           var x$10=a3[1],a3$0=x$10;
          else
           var a3$0=failwith(caml_call1(sprintf(_dP_),_dO_));
          if(a2)
           var x$11=a2[1],a2$0=x$11;
          else
           var a2$0=failwith(caml_call1(sprintf(_dN_),_dM_));
          if(a1)
           var x$12=a1[1],a1$0=x$12;
          else
           var a1$0=failwith(caml_call1(sprintf(_dL_),_dK_));
          if(a0)
           var x$13=a0[1],a0$0=x$13;
          else
           var a0$0=failwith(caml_call1(sprintf(_dJ_),_dI_));
          return [0,a0$0,a1$0,a2$0,a3$0,a4$0,a5$0,a6$0]}}
      var _fp_=to_string$0(x);
      return failwith(caml_call1(sprintf(_dA_),_fp_))}
    function response_of_string(str$0)
     {var i=[0,-1];
      function str(param){i[1]++;return caml_string_get(str$0,i[1])}
      var match$0=parse([0,0,0,0,1],str);
      if(0 === match$0[0])
       var v$0=match$0[1],_fo_=v$0;
      else
       {var st=match$0[1],match=parse(st,function(param){return 32});
        if(0 === match[0])
         var v=match[1],match$1=[0,v];
        else
         var
          match$1=
           0 === st[1]
            ?0
            :raise_unterminated_value(st,current_cursor_value(st[1]));
        if(match$1)
         var v$1=match$1[1],_fo_=v$1;
        else
         var _fo_=raise_unterminated_value(st,current_cursor_value(st[1]))}
      if(typeof _fo_ !== "number" && 7 === _fo_[0])
       {var
         dict$0=_fo_[1],
         xs$4=
          map
           (function(param)
             {var v=param[2],k=param[1];return [0,lowercase_ascii$0(k),v]},
            dict$0),
         xs$5=xs$4,
         state$4=state$2;
        for(;;)
         {var
           a7=state$4[8],
           a6=state$4[7],
           a5=state$4[6],
           a4=state$4[5],
           a3=state$4[4],
           a2=state$4[3],
           a1$1=state$4[2],
           a0$1=state$4[1];
          if(xs$5)
           {var _fk_=xs$5[1],_fl_=_fk_[1];
            if(caml_string_notequal(_fl_,_d7_))
             {if(caml_string_notequal(_fl_,_d8_))
               {if(caml_string_notequal(_fl_,_d9_))
                 {if(caml_string_notequal(_fl_,_d__))
                   {if(caml_string_notequal(_fl_,_d$_))
                     {if(caml_string_notequal(_fl_,_ea_))
                       {if(caml_string_notequal(_fl_,_eb_))
                         {if(caml_string_notequal(_fl_,_ec_))
                           {var xs$6=xs$5[2],xs$5=xs$6;continue}
                          var
                           xs$7=xs$5[2],
                           x$3=_fk_[2],
                           state$5=[0,a0$1,[0,int_of_rpc(x$3)],a2,a3,a4,a5,a6,a7],
                           xs$5=xs$7,
                           state$4=state$5;
                          continue}
                        var
                         xs$8=xs$5[2],
                         x$4=_fk_[2],
                         state$6=[0,a0$1,a1$1,a2,a3,[0,int_of_rpc(x$4)],a5,a6,a7],
                         xs$5=xs$8,
                         state$4=state$6;
                        continue}
                      var
                       xs$9=xs$5[2],
                       x$5=_fk_[2],
                       state$7=[0,a0$1,a1$1,a2,a3,a4,[0,int_of_rpc(x$5)],a6,a7],
                       xs$5=xs$9,
                       state$4=state$7;
                      continue}
                    var xs$10=xs$5[2],x$6=_fk_[2];
                    if(typeof x$6 === "number")
                     var switch$0=0;
                    else
                     switch(x$6[0])
                      {case 4:var s=x$6[1],rpc=[4,lower(s)],switch$0=1;break;
                       case 6:
                        var _fa_=x$6[1];
                        if(_fa_)
                         {var _fb_=_fa_[1];
                          if(typeof _fb_ === "number")
                           var switch$1=1;
                          else
                           if(4 === _fb_[0])
                            var
                             ss=_fa_[2],
                             s$0=_fb_[1],
                             rpc=[6,[0,[4,lower(s$0)],ss]],
                             switch$0=1,
                             switch$1=0;
                           else
                            var switch$1=1;
                          if(switch$1)var switch$0=0}
                        else
                         var switch$0=0;
                        break;
                       default:var switch$0=0}
                    if(!switch$0)var rpc=x$6;
                    if(typeof rpc === "number")
                     var switch$2=0;
                    else
                     if(4 === rpc[0])
                      {var _fh_=rpc[1];
                       if(caml_string_notequal(_fh_,_d4_))
                        if(caml_string_notequal(_fh_,_d5_))
                         var switch$2=0;
                        else
                         var _fi_=0,switch$2=1;
                       else
                        var _fi_=1,switch$2=1}
                     else
                      var switch$2=0;
                    if(!switch$2)
                     var
                      _fg_=to_string$0(rpc),
                      _fi_=failwith(caml_call1(sprintf(_d3_),_fg_));
                    var
                     state$8=[0,[0,_fi_],a1$1,a2,a3,a4,a5,a6,a7],
                     xs$5=xs$10,
                     state$4=state$8;
                    continue}
                  var
                   xs$11=xs$5[2],
                   x$7=_fk_[2],
                   state$9=[0,a0$1,a1$1,a2,a3,a4,a5,[0,bool_of_rpc(x$7)],a7],
                   xs$5=xs$11,
                   state$4=state$9;
                  continue}
                var xs$12=xs$5[2],x$8=_fk_[2];
                if(typeof x$8 === "number")
                 var switch$3=0;
                else
                 if(6 === x$8[0])
                  var l=x$8[1],_fn_=map(data_point_of_rpc,l),switch$3=1;
                 else
                  var switch$3=0;
                if(!switch$3)
                 var
                  _fm_=to_string$0(x$8),
                  _fn_=failwith(caml_call1(sprintf(_ed_),_fm_));
                var
                 state$10=[0,a0$1,a1$1,a2,[0,_fn_],a4,a5,a6,a7],
                 xs$5=xs$12,
                 state$4=state$10;
                continue}
              var xs$13=xs$5[2],x$9=_fk_[2];
              if(typeof x$9 === "number")
               var switch$4=0;
              else
               if(7 === x$9[0])
                {var
                  dict=x$9[1],
                  xs=
                   map
                    (function(param)
                      {var v=param[2],k=param[1];
                       return [0,lowercase_ascii$0(k),v]},
                     dict),
                  xs$0=xs,
                  state=state$1;
                 for(;;)
                  {var a1=state[2],a0=state[1];
                   if(xs$0)
                    {var _fd_=xs$0[1],_fe_=_fd_[1];
                     if(caml_string_notequal(_fe_,_dX_))
                      {if(caml_string_notequal(_fe_,_dY_))
                        {var xs$1=xs$0[2],xs$0=xs$1;continue}
                       var
                        xs$2=xs$0[2],
                        x=_fd_[2],
                        state$0=[0,[0,string_of_rpc(x)],a1],
                        xs$0=xs$2,
                        state=state$0;
                       continue}
                     var
                      xs$3=xs$0[2],
                      x$0=_fd_[2],
                      state$3=[0,a0,[0,string_of_rpc(x$0)]],
                      xs$0=xs$3,
                      state=state$3;
                     continue}
                   if(a1)
                    var x$1=a1[1],a1$0=x$1;
                   else
                    var a1$0=failwith(caml_call1(sprintf(_d2_),_d1_));
                   if(a0)
                    var x$2=a0[1],a0$0=x$2;
                   else
                    var a0$0=failwith(caml_call1(sprintf(_d0_),_dZ_));
                   var _ff_=[0,a0$0,a1$0],switch$4=1;
                   break}}
               else
                var switch$4=0;
              if(!switch$4)
               var
                _fc_=to_string$0(x$9),
                _ff_=failwith(caml_call1(sprintf(_dW_),_fc_));
              var
               state$11=[0,a0$1,a1$1,a2,a3,a4,a5,a6,[0,_ff_]],
               xs$5=xs$13,
               state$4=state$11;
              continue}
            var
             xs$14=xs$5[2],
             x$10=_fk_[2],
             state$12=[0,a0$1,a1$1,[0,bool_of_rpc(x$10)],a3,a4,a5,a6,a7],
             xs$5=xs$14,
             state$4=state$12;
            continue}
          if(a7)
           var x$11=a7[1],a7$0=x$11;
          else
           var a7$0=failwith(caml_call1(sprintf(_et_),_es_));
          if(a6)
           var x$12=a6[1],a6$0=x$12;
          else
           var a6$0=failwith(caml_call1(sprintf(_er_),_eq_));
          if(a5)
           var x$13=a5[1],a5$0=x$13;
          else
           var a5$0=failwith(caml_call1(sprintf(_ep_),_eo_));
          if(a4)
           var x$14=a4[1],a4$0=x$14;
          else
           var a4$0=failwith(caml_call1(sprintf(_en_),_em_));
          if(a3)
           var x$15=a3[1],a3$0=x$15;
          else
           var a3$0=failwith(caml_call1(sprintf(_el_),_ek_));
          if(a2)
           var x$16=a2[1],a2$0=x$16;
          else
           var a2$0=failwith(caml_call1(sprintf(_ej_),_ei_));
          if(a1$1)
           var x$17=a1$1[1],a1$2=x$17;
          else
           var a1$2=failwith(caml_call1(sprintf(_eh_),_eg_));
          if(a0$1)
           var x$18=a0$1[1],a0$2=x$18;
          else
           var a0$2=failwith(caml_call1(sprintf(_ef_),_ee_));
          return [0,a0$2,a1$2,a2$0,a3$0,a4$0,a5$0,a6$0,a7$0]}}
      var _fj_=to_string$0(_fo_);
      return failwith(caml_call1(sprintf(_d6_),_fj_))}
    function get_select_value(id,of_string)
     {var match=getElementById_coerce(id,select);
      if(match)
       {var select$0=match[1];
        return caml_call1(of_string,caml_js_to_string(select$0.value))}
      return 0}
    function get_limit(param)
     {var match=getElementById_coerce(_ex_,input);
      if(match)
       {var input$0=match[1];
        try
         {var _e__=[0,caml_int_of_string(caml_js_to_string(input$0.value))];
          return _e__}
        catch(_e$_)
         {_e$_ = caml_wrap_exception(_e$_);
          if(_e$_[1] === Failure)return 0;
          throw _e$_}}
      return 0}
    function set_div_innerHTML(id,innerHTML)
     {var match=getElementById_coerce(id,div);
      if(match){var div$0=match[1];return div$0.innerHTML = innerHTML}
      return 0}
    function set_message(message){return set_div_innerHTML(_ey_,message)}
    function with_context(paint)
     {var match=getElementById_coerce(_eH_,canvas);
      if(match)
       {var
         canvas$0=match[1],
         _e8_=canvas$0.height,
         _e9_=canvas$0.width,
         context=[0,canvas$0.getContext(d),_e9_,_e8_];
        return caml_call1(paint,context)}
      return 0}
    var black="#000000",light_grey="#CCCCCC",red="#FF0000",green="#00FF00";
    function fill_background(param)
     {var height=param[3],width=param[2],ctx=param[1];
      ctx.fillStyle = light_grey;
      return ctx.fillRect(0,0,width,height)}
    function x_of_time(summary,plot_width,axis_gap,time)
     {return plot_width
             *
             (time - summary[6] | 0)
             /
             (summary[7] - summary[6] | 0)
             +
             axis_gap}
    function y_of_cost(summary,plot_height,axis_gap,cost)
     {var pixels_per_unit_cost=plot_height / (summary[4] - summary[5]);
      return axis_gap
             +
             plot_height
             -
             pixels_per_unit_cost
             *
             (cost - summary[5])}
    window.onload
    =
    handler
     (function(param)
       {with_context(fill_background);
        var match=getElementById_coerce(_eL_,button);
        if(match)
         {var button$0=match[1];
          button$0.onclick
          =
          handler
           (function(param)
             {var
               match=get_select_value(_eu_,of_string),
               match$0=get_select_value(_ev_,of_string),
               match$1=get_select_value(_ew_,of_string$0),
               match$2=get_limit(0);
              if(match)
               if(match$0)
                if(match$1)
                 if(match$2)
                  {var
                    limit=match$2[1],
                    frequency=match$1[1],
                    currency_to=match$0[1],
                    currency_from=match[1];
                   set_message("loading...");
                   var
                    _eM_=max(1,limit),
                    _eN_=to_string$1(currency_to),
                    _eO_=to_string$1(currency_from),
                    _eP_=
                     -637747153 === frequency
                      ?_dq_
                      :-438640655 <= frequency?_dr_:_ds_,
                    url=caml_call4(sprintf(_dz_),_eP_,_eO_,_eN_,_eM_),
                    on_rejected=
                     function(error){return set_message(error.toString())},
                    on_fulfilled$0=
                     function(response)
                      {set_message("done");
                       var accu$0=[0,0,0,0,0,max_float],accu=accu$0,l=response[4];
                       for(;;)
                        {if(l)
                          {var
                            l$0=l[2],
                            a=l[1],
                            overall_low=accu[5],
                            overall_high=accu[4],
                            sum_low=accu[3],
                            sum_high=accu[2],
                            count=accu[1],
                            _eS_=min(overall_low,a[4]),
                            _eT_=max(overall_high,a[3]),
                            accu$1=
                             [0,count + 1 | 0,sum_high + a[3],sum_low + a[4],_eT_,_eS_],
                            accu=accu$1,
                            l=l$0;
                           continue}
                         var
                          overall_low$0=accu[5],
                          overall_high$0=accu[4],
                          sum_low$0=accu[3],
                          sum_high$0=accu[2],
                          count$0=accu[1];
                         if(0 === count$0)
                          var time_from=response[6],time_to=response[5];
                         else
                          var
                           time_to$0=nth(response[4],count$0 - 1 | 0)[1],
                           time_from=nth(response[4],0)[1],
                           time_to=time_to$0;
                         var
                          summary=
                           [0,
                            count$0,
                            sum_high$0 / count$0,
                            sum_low$0 / count$0,
                            overall_high$0,
                            overall_low$0,
                            time_from,
                            time_to];
                         with_context
                          (function(context)
                            {var
                              height=context[3],
                              width=context[2],
                              ctx=context[1],
                              plot_width=width - 100,
                              plot_height=height - 100,
                              _e7_=response[4];
                             fill_background([0,ctx,width,height]);
                             var param=_e7_,axis_gap=50;
                             for(;;)
                              {if(param)
                                {var
                                  param$0=param[2],
                                  a=param[1],
                                  colour=a[5] < a[2]?green:a[2] < a[5]?red:light_grey;
                                 ctx.strokeStyle = colour;
                                 ctx.fillStyle = colour;
                                 var
                                  x=x_of_time(summary,plot_width,axis_gap,a[1]),
                                  y_close=y_of_cost(summary,plot_height,axis_gap,a[2]),
                                  y_high=y_of_cost(summary,plot_height,axis_gap,a[3]),
                                  y_low=y_of_cost(summary,plot_height,axis_gap,a[4]),
                                  y_open=y_of_cost(summary,plot_height,axis_gap,a[5]);
                                 ctx.beginPath();
                                 ctx.moveTo(x,y_low);
                                 ctx.lineTo(x,y_high);
                                 ctx.stroke();
                                 var
                                  top=min(y_open,y_close),
                                  candle_height=Math.abs(y_open - y_close);
                                 ctx.fillRect(x - 2,top,4,candle_height);
                                 var param=param$0;
                                 continue}
                               ctx.fillStyle = black;
                               ctx.strokeStyle = black;
                               ctx.beginPath();
                               ctx.moveTo(50,50);
                               ctx.lineTo(50,plot_height + 50);
                               ctx.lineTo(plot_width + 50,plot_height + 50);
                               ctx.stroke();
                               if(1 < summary[1])
                                {var
                                  time_range=summary[7] - summary[6] | 0,
                                  time_step=caml_div(time_range,summary[1] - 1 | 0),
                                  steps_per_tick=max(1,caml_div(time_range,time_step) / 4 | 0),
                                  ticks=
                                   caml_div(time_range,caml_mul(steps_per_tick,time_step))
                                   +
                                   1
                                   |
                                   0,
                                  _eZ_=ticks - 1 | 0,
                                  _eY_=0;
                                 if(!(_eZ_ < 0))
                                  {var tick=_eY_;
                                   for(;;)
                                    {var
                                      time=
                                       summary[6]
                                       +
                                       caml_mul(caml_mul(tick,time_step),steps_per_tick)
                                       |
                                       0,
                                      x$0=x_of_time(summary,plot_width,axis_gap,time);
                                     ctx.beginPath();
                                     ctx.moveTo(x$0,plot_height + 50);
                                     ctx.lineTo(x$0,plot_height + 50 + 5);
                                     ctx.stroke();
                                     var
                                      date=new date_constr(time * 1e3),
                                      _e1_=date.getMinutes(),
                                      _e2_=date.getHours(),
                                      time_string=caml_call2(sprintf(_eJ_),_e2_,_e1_),
                                      _e3_=date.getFullYear(),
                                      _e4_=date.getMonth() + 1 | 0,
                                      _e5_=date.getDate(),
                                      date_string=caml_call3(sprintf(_eK_),_e5_,_e4_,_e3_);
                                     ctx.fillText
                                      (time_string.toString(),x$0 - 15,plot_height + 50 + 20);
                                     ctx.fillText
                                      (date_string.toString(),x$0 - 27,plot_height + 50 + 40);
                                     var _e6_=tick + 1 | 0;
                                     if(_eZ_ !== tick){var tick=_e6_;continue}
                                     break}}}
                               var i=0;
                               for(;;)
                                {var
                                  cost=summary[5] + i * (summary[4] - summary[5]) / 4,
                                  y=y_of_cost(summary,plot_height,axis_gap,cost);
                                 ctx.beginPath();
                                 ctx.moveTo(50,y);
                                 ctx.lineTo(45,y);
                                 ctx.stroke();
                                 ctx.fillText
                                  (caml_call1(sprintf(_eI_),cost).toString(),0,y + 4);
                                 var _e0_=i + 1 | 0;
                                 if(4 !== i){var i=_e0_;continue}
                                 return 0}}});
                         var _eU_=summary[2];
                         set_div_innerHTML
                          (_eA_,caml_call1(sprintf(_ez_),_eU_).toString());
                         var _eV_=summary[3];
                         set_div_innerHTML
                          (_eC_,caml_call1(sprintf(_eB_),_eV_).toString());
                         var _eW_=summary[4];
                         set_div_innerHTML
                          (_eE_,caml_call1(sprintf(_eD_),_eW_).toString());
                         var _eX_=summary[5];
                         return set_div_innerHTML
                                 (_eG_,caml_call1(sprintf(_eF_),_eX_).toString())}},
                    on_fulfilled=
                     function(responseText)
                      {try
                        {var
                          _eR_=
                           resolve(response_of_string(caml_js_to_string(responseText)));
                         return _eR_}
                       catch(e)
                        {e = caml_wrap_exception(e);
                         return reject(new error_constr(to_string(e).toString()))}},
                    f=
                     function(resolve,reject)
                      {var request=create$0(0);
                       request.open("GET",url.toString(),true$0);
                       request.onreadystatechange
                       =
                       caml_js_wrap_callback
                        (function(param)
                          {var _eQ_=4 === request.readyState?1:0;
                           return _eQ_
                                   ?200 === request.status
                                     ?caml_call1(resolve,request.responseText)
                                     :caml_call1(reject,new error_constr(request.statusText))
                                   :_eQ_});
                       return request.send(no_handler)},
                    promise=new promise_global(f),
                    promise$0=promise.then(on_fulfilled,undefined$0);
                   promise$0.then(on_fulfilled$0,on_rejected);
                   var switch$0=1}
                 else
                  var switch$0=0;
                else
                 var switch$0=0;
               else
                var switch$0=0;
              else
               var switch$0=0;
              return false$0})}
        return false$0});
    caml_call1(exit_function[1],0);
    return}
  (function(){return this}()));
